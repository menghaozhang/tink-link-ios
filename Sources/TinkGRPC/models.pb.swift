// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum GRPCMarketStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case beta // = 1
  case disabled // = 2
  case enabled // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .beta
    case 2: self = .disabled
    case 3: self = .enabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .beta: return 1
    case .disabled: return 2
    case .enabled: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCMarketStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCMarketStatus] = [
    .unknown,
    .beta,
    .disabled,
    .enabled,
  ]
}

#endif  // swift(>=4.2)

enum GRPCPeriodDateBreakType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case monthly // = 1
  case monthlyAdjusted // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .monthly
    case 2: self = .monthlyAdjusted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .monthly: return 1
    case .monthlyAdjusted: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCPeriodDateBreakType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCPeriodDateBreakType] = [
    .unknown,
    .monthly,
    .monthlyAdjusted,
  ]
}

#endif  // swift(>=4.2)

enum GRPCPeriodMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case daily // = 1
  case monthly // = 2
  case weekly // = 3
  case yearly // = 4
  case all // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .daily
    case 2: self = .monthly
    case 3: self = .weekly
    case 4: self = .yearly
    case 5: self = .all
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .daily: return 1
    case .monthly: return 2
    case .weekly: return 3
    case .yearly: return 4
    case .all: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCPeriodMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCPeriodMode] = [
    .unknown,
    .daily,
    .monthly,
    .weekly,
    .yearly,
    .all,
  ]
}

#endif  // swift(>=4.2)

enum GRPCBankIdAuthenticationStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case authenticated // = 1
  case authenticationError // = 2
  case awaitingBankidAuthentication // = 3
  case noUser // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .authenticated
    case 2: self = .authenticationError
    case 3: self = .awaitingBankidAuthentication
    case 4: self = .noUser
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .authenticated: return 1
    case .authenticationError: return 2
    case .awaitingBankidAuthentication: return 3
    case .noUser: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCBankIdAuthenticationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCBankIdAuthenticationStatus] = [
    .unknown,
    .authenticated,
    .authenticationError,
    .awaitingBankidAuthentication,
    .noUser,
  ]
}

#endif  // swift(>=4.2)

enum GRPCAuthenticationStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case authenticated // = 1
  case authenticationError // = 2
  case noUser // = 4
  case userBlocked // = 5
  case authenticatedUnauthorizedDevice // = 6
  case authenticationErrorUnauthorizedDevice // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .authenticated
    case 2: self = .authenticationError
    case 4: self = .noUser
    case 5: self = .userBlocked
    case 6: self = .authenticatedUnauthorizedDevice
    case 7: self = .authenticationErrorUnauthorizedDevice
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .authenticated: return 1
    case .authenticationError: return 2
    case .noUser: return 4
    case .userBlocked: return 5
    case .authenticatedUnauthorizedDevice: return 6
    case .authenticationErrorUnauthorizedDevice: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCAuthenticationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAuthenticationStatus] = [
    .unknown,
    .authenticated,
    .authenticationError,
    .noUser,
    .userBlocked,
    .authenticatedUnauthorizedDevice,
    .authenticationErrorUnauthorizedDevice,
  ]
}

#endif  // swift(>=4.2)

enum GRPCAuthenticationKeyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case keyTypeUnknown // = 0
  case keyTypeRsa // = 1
  case keyTypeEcdsa // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .keyTypeUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .keyTypeUnknown
    case 1: self = .keyTypeRsa
    case 2: self = .keyTypeEcdsa
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .keyTypeUnknown: return 0
    case .keyTypeRsa: return 1
    case .keyTypeEcdsa: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCAuthenticationKeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAuthenticationKeyType] = [
    .keyTypeUnknown,
    .keyTypeRsa,
    .keyTypeEcdsa,
  ]
}

#endif  // swift(>=4.2)

enum GRPCAuthenticationSource: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case touchid // = 1
  case fingerprint // = 2
  case faceid // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .touchid
    case 2: self = .fingerprint
    case 3: self = .faceid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .touchid: return 1
    case .fingerprint: return 2
    case .faceid: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCAuthenticationSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAuthenticationSource] = [
    .unknown,
    .touchid,
    .fingerprint,
    .faceid,
  ]
}

#endif  // swift(>=4.2)

enum GRPCIdentityAnswerKey: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case ok // = 1
  case fraudulent // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .ok
    case 2: self = .fraudulent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .ok: return 1
    case .fraudulent: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCIdentityAnswerKey: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCIdentityAnswerKey] = [
    .unknown,
    .ok,
    .fraudulent,
  ]
}

#endif  // swift(>=4.2)

enum GRPCConsentAction: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case accepted // = 1
  case declined // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .accepted
    case 2: self = .declined
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .accepted: return 1
    case .declined: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCConsentAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCConsentAction] = [
    .unknown,
    .accepted,
    .declined,
  ]
}

#endif  // swift(>=4.2)

enum GRPCSmsOtpStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case correct // = 1
  case incorrect // = 2
  case expired // = 3
  case tooManyAttempts // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .correct
    case 2: self = .incorrect
    case 3: self = .expired
    case 4: self = .tooManyAttempts
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .correct: return 1
    case .incorrect: return 2
    case .expired: return 3
    case .tooManyAttempts: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCSmsOtpStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCSmsOtpStatus] = [
    .unknown,
    .correct,
    .incorrect,
    .expired,
    .tooManyAttempts,
  ]
}

#endif  // swift(>=4.2)

enum GRPCRateAppStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case clickedIgnore // = 1
  case clickedRateInStore // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .clickedIgnore
    case 2: self = .clickedRateInStore
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .clickedIgnore: return 1
    case .clickedRateInStore: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCRateAppStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCRateAppStatus] = [
    .unknown,
    .clickedIgnore,
    .clickedRateInStore,
  ]
}

#endif  // swift(>=4.2)

enum GRPCAuthenticationMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case bankid // = 1
  case emailAndPassword // = 2
  case smsOtpAndPin6 // = 3
  case phoneNumberAndPin6 // = 4
  case abnAmroPin5 // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .bankid
    case 2: self = .emailAndPassword
    case 3: self = .smsOtpAndPin6
    case 4: self = .phoneNumberAndPin6
    case 5: self = .abnAmroPin5
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .bankid: return 1
    case .emailAndPassword: return 2
    case .smsOtpAndPin6: return 3
    case .phoneNumberAndPin6: return 4
    case .abnAmroPin5: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCAuthenticationMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAuthenticationMethod] = [
    .unknown,
    .bankid,
    .emailAndPassword,
    .smsOtpAndPin6,
    .phoneNumberAndPin6,
    .abnAmroPin5,
  ]
}

#endif  // swift(>=4.2)

enum GRPCSortType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case score // = 1
  case date // = 2
  case account // = 3
  case description_ // = 4
  case amount // = 5
  case category // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .score
    case 2: self = .date
    case 3: self = .account
    case 4: self = .description_
    case 5: self = .amount
    case 6: self = .category
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .score: return 1
    case .date: return 2
    case .account: return 3
    case .description_: return 4
    case .amount: return 5
    case .category: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCSortType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCSortType] = [
    .unknown,
    .score,
    .date,
    .account,
    .description_,
    .amount,
    .category,
  ]
}

#endif  // swift(>=4.2)

enum GRPCOrderType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case asc // = 1
  case desc // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .asc
    case 2: self = .desc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .asc: return 1
    case .desc: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCOrderType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCOrderType] = [
    .unknown,
    .asc,
    .desc,
  ]
}

#endif  // swift(>=4.2)

enum GRPCTheme: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case light // = 1
  case black // = 2
  case dark // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .light
    case 2: self = .black
    case 3: self = .dark
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .light: return 1
    case .black: return 2
    case .dark: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCTheme: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCTheme] = [
    .unknown,
    .light,
    .black,
    .dark,
  ]
}

#endif  // swift(>=4.2)

struct GRPCCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var providerName: String {
    get {return _storage._providerName}
    set {_uniqueStorage()._providerName = newValue}
  }

  var type: GRPCCredential.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var status: GRPCCredential.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var statusPayload: String {
    get {return _storage._statusPayload}
    set {_uniqueStorage()._statusPayload = newValue}
  }

  var statusUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._statusUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._statusUpdated = newValue}
  }
  /// Returns true if `statusUpdated` has been explicitly set.
  var hasStatusUpdated: Bool {return _storage._statusUpdated != nil}
  /// Clears the value of `statusUpdated`. Subsequent reads from it will return its default value.
  mutating func clearStatusUpdated() {_uniqueStorage()._statusUpdated = nil}

  var updated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updated = newValue}
  }
  /// Returns true if `updated` has been explicitly set.
  var hasUpdated: Bool {return _storage._updated != nil}
  /// Clears the value of `updated`. Subsequent reads from it will return its default value.
  mutating func clearUpdated() {_uniqueStorage()._updated = nil}

  var fields: Dictionary<String,String> {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var supplementalInformationFields: [GRPCProviderFieldSpecification] {
    get {return _storage._supplementalInformationFields}
    set {_uniqueStorage()._supplementalInformationFields = newValue}
  }

  var thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication {
    get {return _storage._thirdPartyAppAuthentication ?? GRPCThirdPartyAppAuthentication()}
    set {_uniqueStorage()._thirdPartyAppAuthentication = newValue}
  }
  /// Returns true if `thirdPartyAppAuthentication` has been explicitly set.
  var hasThirdPartyAppAuthentication: Bool {return _storage._thirdPartyAppAuthentication != nil}
  /// Clears the value of `thirdPartyAppAuthentication`. Subsequent reads from it will return its default value.
  mutating func clearThirdPartyAppAuthentication() {_uniqueStorage()._thirdPartyAppAuthentication = nil}

  var sessionExpiryDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._sessionExpiryDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._sessionExpiryDate = newValue}
  }
  /// Returns true if `sessionExpiryDate` has been explicitly set.
  var hasSessionExpiryDate: Bool {return _storage._sessionExpiryDate != nil}
  /// Clears the value of `sessionExpiryDate`. Subsequent reads from it will return its default value.
  mutating func clearSessionExpiryDate() {_uniqueStorage()._sessionExpiryDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case created // = 1
    case authenticating // = 2
    case updating // = 3
    case updated // = 4
    case temporaryError // = 5
    case authenticationError // = 6
    case permanentError // = 7

    /// Will be deprecated and replaced by "STATUS_AWAITING_THIRD_PARTY_APP_AUTHENTICATION".
    case awaitingMobileBankidAuthentication // = 8
    case awaitingSupplementalInformation // = 9
    case disabled // = 10
    case awaitingThirdPartyAppAuthentication // = 11
    case sessionExpired // = 12
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .created
      case 2: self = .authenticating
      case 3: self = .updating
      case 4: self = .updated
      case 5: self = .temporaryError
      case 6: self = .authenticationError
      case 7: self = .permanentError
      case 8: self = .awaitingMobileBankidAuthentication
      case 9: self = .awaitingSupplementalInformation
      case 10: self = .disabled
      case 11: self = .awaitingThirdPartyAppAuthentication
      case 12: self = .sessionExpired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .created: return 1
      case .authenticating: return 2
      case .updating: return 3
      case .updated: return 4
      case .temporaryError: return 5
      case .authenticationError: return 6
      case .permanentError: return 7
      case .awaitingMobileBankidAuthentication: return 8
      case .awaitingSupplementalInformation: return 9
      case .disabled: return 10
      case .awaitingThirdPartyAppAuthentication: return 11
      case .sessionExpired: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case password // = 1

    /// Will be deprecated and replaced by "TYPE_THIRD_PARTY_AUTHENTICATION".
    case mobileBankid // = 2
    case keyfob // = 3
    case fraud // = 4
    case thirdPartyAuthentication // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .password
      case 2: self = .mobileBankid
      case 3: self = .keyfob
      case 4: self = .fraud
      case 5: self = .thirdPartyAuthentication
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .password: return 1
      case .mobileBankid: return 2
      case .keyfob: return 3
      case .fraud: return 4
      case .thirdPartyAuthentication: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCCredential.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCCredential.Status] = [
    .unknown,
    .created,
    .authenticating,
    .updating,
    .updated,
    .temporaryError,
    .authenticationError,
    .permanentError,
    .awaitingMobileBankidAuthentication,
    .awaitingSupplementalInformation,
    .disabled,
    .awaitingThirdPartyAppAuthentication,
    .sessionExpired,
  ]
}

extension GRPCCredential.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCCredential.TypeEnum] = [
    .unknown,
    .password,
    .mobileBankid,
    .keyfob,
    .fraud,
    .thirdPartyAuthentication,
  ]
}

#endif  // swift(>=4.2)

struct GRPCAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var balance: GRPCCurrencyDenominatedAmount {
    get {return _storage._balance ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {_uniqueStorage()._balance = nil}

  var accountNumber: String {
    get {return _storage._accountNumber}
    set {_uniqueStorage()._accountNumber = newValue}
  }

  var credentialID: String {
    get {return _storage._credentialID}
    set {_uniqueStorage()._credentialID = newValue}
  }

  var excluded: Bool {
    get {return _storage._excluded}
    set {_uniqueStorage()._excluded = newValue}
  }

  var favored: Bool {
    get {return _storage._favored}
    set {_uniqueStorage()._favored = newValue}
  }

  var transactional: Bool {
    get {return _storage._transactional}
    set {_uniqueStorage()._transactional = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var ownership: GRPCExactNumber {
    get {return _storage._ownership ?? GRPCExactNumber()}
    set {_uniqueStorage()._ownership = newValue}
  }
  /// Returns true if `ownership` has been explicitly set.
  var hasOwnership: Bool {return _storage._ownership != nil}
  /// Clears the value of `ownership`. Subsequent reads from it will return its default value.
  mutating func clearOwnership() {_uniqueStorage()._ownership = nil}

  var type: GRPCAccount.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var images: GRPCImages {
    get {return _storage._images ?? GRPCImages()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  mutating func clearImages() {_uniqueStorage()._images = nil}

  var closed: Bool {
    get {return _storage._closed}
    set {_uniqueStorage()._closed = newValue}
  }

  var identifiers: [String] {
    get {return _storage._identifiers}
    set {_uniqueStorage()._identifiers = newValue}
  }

  var exclusionType: GRPCAccount.Exclusion {
    get {return _storage._exclusionType}
    set {_uniqueStorage()._exclusionType = newValue}
  }

  var flags: [GRPCAccount.AccountFlag] {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case checking // = 1
    case savings // = 2
    case investment // = 3
    case mortgage // = 4
    case creditCard // = 5
    case loan // = 6
    case dummy // = 7
    case pension // = 8
    case other // = 9
    case external // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .checking
      case 2: self = .savings
      case 3: self = .investment
      case 4: self = .mortgage
      case 5: self = .creditCard
      case 6: self = .loan
      case 7: self = .dummy
      case 8: self = .pension
      case 9: self = .other
      case 10: self = .external
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .checking: return 1
      case .savings: return 2
      case .investment: return 3
      case .mortgage: return 4
      case .creditCard: return 5
      case .loan: return 6
      case .dummy: return 7
      case .pension: return 8
      case .other: return 9
      case .external: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Exclusion: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unkown // = 0
    case aggregation // = 4
    case pfmAndSearch // = 1
    case pfmData // = 2
    case none // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unkown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unkown
      case 1: self = .pfmAndSearch
      case 2: self = .pfmData
      case 3: self = .none
      case 4: self = .aggregation
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unkown: return 0
      case .pfmAndSearch: return 1
      case .pfmData: return 2
      case .none: return 3
      case .aggregation: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AccountFlag: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case business // = 1
    case mandate // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .business
      case 2: self = .mandate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .business: return 1
      case .mandate: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCAccount.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAccount.TypeEnum] = [
    .unknown,
    .checking,
    .savings,
    .investment,
    .mortgage,
    .creditCard,
    .loan,
    .dummy,
    .pension,
    .other,
    .external,
  ]
}

extension GRPCAccount.Exclusion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAccount.Exclusion] = [
    .unkown,
    .aggregation,
    .pfmAndSearch,
    .pfmData,
    .none,
  ]
}

extension GRPCAccount.AccountFlag: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAccount.AccountFlag] = [
    .unknown,
    .business,
    .mandate,
  ]
}

#endif  // swift(>=4.2)

struct GRPCTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  var amount: GRPCCurrencyDenominatedAmount {
    get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var categoryCode: String {
    get {return _storage._categoryCode}
    set {_uniqueStorage()._categoryCode = newValue}
  }

  var originalAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._originalAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._originalAmount = newValue}
  }
  /// Returns true if `originalAmount` has been explicitly set.
  var hasOriginalAmount: Bool {return _storage._originalAmount != nil}
  /// Clears the value of `originalAmount`. Subsequent reads from it will return its default value.
  mutating func clearOriginalAmount() {_uniqueStorage()._originalAmount = nil}

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var notes: String {
    get {return _storage._notes}
    set {_uniqueStorage()._notes = newValue}
  }

  var tags: [GRPCTag] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  var originalDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._originalDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._originalDate = newValue}
  }
  /// Returns true if `originalDate` has been explicitly set.
  var hasOriginalDate: Bool {return _storage._originalDate != nil}
  /// Clears the value of `originalDate`. Subsequent reads from it will return its default value.
  mutating func clearOriginalDate() {_uniqueStorage()._originalDate = nil}

  var originalDescription: String {
    get {return _storage._originalDescription}
    set {_uniqueStorage()._originalDescription = newValue}
  }

  var details: GRPCTransaction.TransactionDetails {
    get {return _storage._details ?? GRPCTransaction.TransactionDetails()}
    set {_uniqueStorage()._details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  var hasDetails: Bool {return _storage._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  mutating func clearDetails() {_uniqueStorage()._details = nil}

  var pending: Bool {
    get {return _storage._pending}
    set {_uniqueStorage()._pending = newValue}
  }

  var upcoming: Bool {
    get {return _storage._upcoming}
    set {_uniqueStorage()._upcoming = newValue}
  }

  var type: GRPCTransaction.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var secondaryDescription: String {
    get {return _storage._secondaryDescription}
    set {_uniqueStorage()._secondaryDescription = newValue}
  }

  var inserted: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._inserted ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._inserted = newValue}
  }
  /// Returns true if `inserted` has been explicitly set.
  var hasInserted: Bool {return _storage._inserted != nil}
  /// Clears the value of `inserted`. Subsequent reads from it will return its default value.
  mutating func clearInserted() {_uniqueStorage()._inserted = nil}

  var parts: [GRPCTransaction.Part] {
    get {return _storage._parts}
    set {_uniqueStorage()._parts = newValue}
  }

  var dispensableAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._dispensableAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._dispensableAmount = newValue}
  }
  /// Returns true if `dispensableAmount` has been explicitly set.
  var hasDispensableAmount: Bool {return _storage._dispensableAmount != nil}
  /// Clears the value of `dispensableAmount`. Subsequent reads from it will return its default value.
  mutating func clearDispensableAmount() {_uniqueStorage()._dispensableAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case `default` // = 1
    case creditCard // = 2
    case payment // = 3
    case transfer // = 4
    case withdrawal // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .default
      case 2: self = .creditCard
      case 3: self = .payment
      case 4: self = .transfer
      case 5: self = .withdrawal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .default: return 1
      case .creditCard: return 2
      case .payment: return 3
      case .transfer: return 4
      case .withdrawal: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct TransactionDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Mapping of fields coming from the payload
    var transferID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Part {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var categoryCode: String {
      get {return _storage._categoryCode}
      set {_uniqueStorage()._categoryCode = newValue}
    }

    var counterpart: GRPCTransaction.Counterpart {
      get {return _storage._counterpart ?? GRPCTransaction.Counterpart()}
      set {_uniqueStorage()._counterpart = newValue}
    }
    /// Returns true if `counterpart` has been explicitly set.
    var hasCounterpart: Bool {return _storage._counterpart != nil}
    /// Clears the value of `counterpart`. Subsequent reads from it will return its default value.
    mutating func clearCounterpart() {_uniqueStorage()._counterpart = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Counterpart {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var transactionID: String {
      get {return _storage._transactionID}
      set {_uniqueStorage()._transactionID = newValue}
    }

    var transactionAmount: GRPCCurrencyDenominatedAmount {
      get {return _storage._transactionAmount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._transactionAmount = newValue}
    }
    /// Returns true if `transactionAmount` has been explicitly set.
    var hasTransactionAmount: Bool {return _storage._transactionAmount != nil}
    /// Clears the value of `transactionAmount`. Subsequent reads from it will return its default value.
    mutating func clearTransactionAmount() {_uniqueStorage()._transactionAmount = nil}

    var transactionDescription: String {
      get {return _storage._transactionDescription}
      set {_uniqueStorage()._transactionDescription = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCTransaction.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCTransaction.TypeEnum] = [
    .unknown,
    .default,
    .creditCard,
    .payment,
    .transfer,
    .withdrawal,
  ]
}

#endif  // swift(>=4.2)

struct GRPCProvider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  var type: GRPCProvider.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var status: GRPCProvider.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var credentialType: GRPCCredential.TypeEnum {
    get {return _storage._credentialType}
    set {_uniqueStorage()._credentialType = newValue}
  }

  var helpText: String {
    get {return _storage._helpText}
    set {_uniqueStorage()._helpText = newValue}
  }

  var popular: Bool {
    get {return _storage._popular}
    set {_uniqueStorage()._popular = newValue}
  }

  var fields: [GRPCProviderFieldSpecification] {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var groupDisplayName: String {
    get {return _storage._groupDisplayName}
    set {_uniqueStorage()._groupDisplayName = newValue}
  }

  var images: GRPCImages {
    get {return _storage._images ?? GRPCImages()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  mutating func clearImages() {_uniqueStorage()._images = nil}

  var displayDescription: String {
    get {return _storage._displayDescription}
    set {_uniqueStorage()._displayDescription = newValue}
  }

  var capabilities: [GRPCProvider.Capability] {
    get {return _storage._capabilities}
    set {_uniqueStorage()._capabilities = newValue}
  }

  var marketCode: String {
    get {return _storage._marketCode}
    set {_uniqueStorage()._marketCode = newValue}
  }

  var accessType: GRPCProvider.AccessType {
    get {return _storage._accessType}
    set {_uniqueStorage()._accessType = newValue}
  }

  /// ASS-247: 15 and 16 is removed in favor of 17 and 18
  var financialInstitutionID: String {
    get {return _storage._financialInstitutionID}
    set {_uniqueStorage()._financialInstitutionID = newValue}
  }

  var financialInstitutionName: String {
    get {return _storage._financialInstitutionName}
    set {_uniqueStorage()._financialInstitutionName = newValue}
  }

  var authenticationFlow: GRPCProvider.AuthenticationFlow {
    get {return _storage._authenticationFlow}
    set {_uniqueStorage()._authenticationFlow = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case bank // = 1
    case creditCard // = 2
    case broker // = 3
    case other // = 4
    case test // = 5
    case fraud // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .bank
      case 2: self = .creditCard
      case 3: self = .broker
      case 4: self = .other
      case 5: self = .test
      case 6: self = .fraud
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .bank: return 1
      case .creditCard: return 2
      case .broker: return 3
      case .other: return 4
      case .test: return 5
      case .fraud: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case enabled // = 1
    case disabled // = 2
    case temporaryDisabled // = 3
    case obsolete // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .enabled
      case 2: self = .disabled
      case 3: self = .temporaryDisabled
      case 4: self = .obsolete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .enabled: return 1
      case .disabled: return 2
      case .temporaryDisabled: return 3
      case .obsolete: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Capability: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case transfers // = 1
    case mortgageAggregation // = 2
    case checkingAccounts // = 3
    case savingsAccounts // = 4
    case creditCards // = 5
    case investments // = 6
    case loans // = 7
    case payments // = 8
    case mortgageLoan // = 9
    case identityData // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .transfers
      case 2: self = .mortgageAggregation
      case 3: self = .checkingAccounts
      case 4: self = .savingsAccounts
      case 5: self = .creditCards
      case 6: self = .investments
      case 7: self = .loans
      case 8: self = .payments
      case 9: self = .mortgageLoan
      case 10: self = .identityData
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .transfers: return 1
      case .mortgageAggregation: return 2
      case .checkingAccounts: return 3
      case .savingsAccounts: return 4
      case .creditCards: return 5
      case .investments: return 6
      case .loans: return 7
      case .payments: return 8
      case .mortgageLoan: return 9
      case .identityData: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AccessType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case openBanking // = 1
    case other // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .openBanking
      case 2: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .openBanking: return 1
      case .other: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AuthenticationFlow: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case embedded // = 1
    case redirect // = 2
    case decoupled // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .embedded
      case 2: self = .redirect
      case 3: self = .decoupled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .embedded: return 1
      case .redirect: return 2
      case .decoupled: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCProvider.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.TypeEnum] = [
    .unknown,
    .bank,
    .creditCard,
    .broker,
    .other,
    .test,
    .fraud,
  ]
}

extension GRPCProvider.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.Status] = [
    .unknown,
    .enabled,
    .disabled,
    .temporaryDisabled,
    .obsolete,
  ]
}

extension GRPCProvider.Capability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.Capability] = [
    .unknown,
    .transfers,
    .mortgageAggregation,
    .checkingAccounts,
    .savingsAccounts,
    .creditCards,
    .investments,
    .loans,
    .payments,
    .mortgageLoan,
    .identityData,
  ]
}

extension GRPCProvider.AccessType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.AccessType] = [
    .unknown,
    .openBanking,
    .other,
  ]
}

extension GRPCProvider.AuthenticationFlow: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.AuthenticationFlow] = [
    .unknown,
    .embedded,
    .redirect,
    .decoupled,
  ]
}

#endif  // swift(>=4.2)

struct GRPCCurrencyDenominatedAmount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: GRPCExactNumber {
    get {return _storage._value ?? GRPCExactNumber()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_uniqueStorage()._value = nil}

  var currencyCode: String {
    get {return _storage._currencyCode}
    set {_uniqueStorage()._currencyCode = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCExactNumber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unscaledValue: Int64 = 0

  var scale: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCPeriod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var year: UInt32 {
    get {return _storage._year}
    set {_uniqueStorage()._year = newValue}
  }

  var month: UInt32 {
    get {return _storage._month}
    set {_uniqueStorage()._month = newValue}
  }

  var week: UInt32 {
    get {return _storage._week}
    set {_uniqueStorage()._week = newValue}
  }

  var day: UInt32 {
    get {return _storage._day}
    set {_uniqueStorage()._day = newValue}
  }

  var start: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_uniqueStorage()._start = nil}

  var stop: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._stop ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._stop = newValue}
  }
  /// Returns true if `stop` has been explicitly set.
  var hasStop: Bool {return _storage._stop != nil}
  /// Clears the value of `stop`. Subsequent reads from it will return its default value.
  mutating func clearStop() {_uniqueStorage()._stop = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCPeriodDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var year: UInt32 = 0

  var month: UInt32 = 0

  var week: UInt32 = 0

  var day: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCStatisticTree {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var balancesByAccountID: Dictionary<String,GRPCStatisticNode> = [:]

  var balancesByAccountGroupType: Dictionary<String,GRPCStatisticNode> = [:]

  var leftToSpend: Dictionary<String,GRPCStatisticNode> = [:]

  var expensesByCategoryCode: Dictionary<String,GRPCStatisticNode> = [:]

  var incomeByCategoryCode: Dictionary<String,GRPCStatisticNode> = [:]

  var loanRatesByProperty: Dictionary<String,GRPCStatisticNode> = [:]

  var loanBalancesByProperty: Dictionary<String,GRPCStatisticNode> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case balancesByAccountID // = 1
    case balancesByAccountGroupType // = 2
    case leftToSpend // = 3
    case expencesByCategoryCode // = 4
    case incomeByCategoryCode // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .balancesByAccountID
      case 2: self = .balancesByAccountGroupType
      case 3: self = .leftToSpend
      case 4: self = .expencesByCategoryCode
      case 5: self = .incomeByCategoryCode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .balancesByAccountID: return 1
      case .balancesByAccountGroupType: return 2
      case .leftToSpend: return 3
      case .expencesByCategoryCode: return 4
      case .incomeByCategoryCode: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension GRPCStatisticTree.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCStatisticTree.TypeEnum] = [
    .unknown,
    .balancesByAccountID,
    .balancesByAccountGroupType,
    .leftToSpend,
    .expencesByCategoryCode,
    .incomeByCategoryCode,
  ]
}

#endif  // swift(>=4.2)

struct GRPCStatisticNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var period: GRPCPeriod {
    get {return _storage._period ?? GRPCPeriod()}
    set {_uniqueStorage()._period = newValue}
  }
  /// Returns true if `period` has been explicitly set.
  var hasPeriod: Bool {return _storage._period != nil}
  /// Clears the value of `period`. Subsequent reads from it will return its default value.
  mutating func clearPeriod() {_uniqueStorage()._period = nil}

  var nodeValue: OneOf_NodeValue? {
    get {return _storage._nodeValue}
    set {_uniqueStorage()._nodeValue = newValue}
  }

  /// Used if the value on the node is related to a currency, like "balances by account"
  var amount: GRPCCurrencyDenominatedAmount {
    get {
      if case .amount(let v)? = _storage._nodeValue {return v}
      return GRPCCurrencyDenominatedAmount()
    }
    set {_uniqueStorage()._nodeValue = .amount(newValue)}
  }

  /// Used if the value on the node isn't related to a currency, like "loan rate by property"
  var value: GRPCExactNumber {
    get {
      if case .value(let v)? = _storage._nodeValue {return v}
      return GRPCExactNumber()
    }
    set {_uniqueStorage()._nodeValue = .value(newValue)}
  }

  var children: Dictionary<String,GRPCStatisticNode> {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_NodeValue: Equatable {
    /// Used if the value on the node is related to a currency, like "balances by account"
    case amount(GRPCCurrencyDenominatedAmount)
    /// Used if the value on the node isn't related to a currency, like "loan rate by property"
    case value(GRPCExactNumber)

  #if !swift(>=4.1)
    static func ==(lhs: GRPCStatisticNode.OneOf_NodeValue, rhs: GRPCStatisticNode.OneOf_NodeValue) -> Bool {
      switch (lhs, rhs) {
      case (.amount(let l), .amount(let r)): return l == r
      case (.value(let l), .value(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCFollowItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var criteria: OneOf_Criteria? {
    get {return _storage._criteria}
    set {_uniqueStorage()._criteria = newValue}
  }

  var expensesCriteria: GRPCExpensesFollowCriteria {
    get {
      if case .expensesCriteria(let v)? = _storage._criteria {return v}
      return GRPCExpensesFollowCriteria()
    }
    set {_uniqueStorage()._criteria = .expensesCriteria(newValue)}
  }

  var searchCriteria: GRPCSearchFollowCriteria {
    get {
      if case .searchCriteria(let v)? = _storage._criteria {return v}
      return GRPCSearchFollowCriteria()
    }
    set {_uniqueStorage()._criteria = .searchCriteria(newValue)}
  }

  var savingCriteria: GRPCSavingsFollowCriteria {
    get {
      if case .savingCriteria(let v)? = _storage._criteria {return v}
      return GRPCSavingsFollowCriteria()
    }
    set {_uniqueStorage()._criteria = .savingCriteria(newValue)}
  }

  var data: GRPCFollowData {
    get {return _storage._data ?? GRPCFollowData()}
    set {_uniqueStorage()._data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return _storage._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {_uniqueStorage()._data = nil}

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var createdDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return _storage._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Criteria: Equatable {
    case expensesCriteria(GRPCExpensesFollowCriteria)
    case searchCriteria(GRPCSearchFollowCriteria)
    case savingCriteria(GRPCSavingsFollowCriteria)

  #if !swift(>=4.1)
    static func ==(lhs: GRPCFollowItem.OneOf_Criteria, rhs: GRPCFollowItem.OneOf_Criteria) -> Bool {
      switch (lhs, rhs) {
      case (.expensesCriteria(let l), .expensesCriteria(let r)): return l == r
      case (.searchCriteria(let l), .searchCriteria(let r)): return l == r
      case (.savingCriteria(let l), .savingCriteria(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCFollowItemHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var historicalAmounts: [GRPCPeriodExactNumberPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCExpensesFollowCriteria {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetAmount: GRPCExactNumber {
    get {return _storage._targetAmount ?? GRPCExactNumber()}
    set {_uniqueStorage()._targetAmount = newValue}
  }
  /// Returns true if `targetAmount` has been explicitly set.
  var hasTargetAmount: Bool {return _storage._targetAmount != nil}
  /// Clears the value of `targetAmount`. Subsequent reads from it will return its default value.
  mutating func clearTargetAmount() {_uniqueStorage()._targetAmount = nil}

  var categoryCodes: [String] {
    get {return _storage._categoryCodes}
    set {_uniqueStorage()._categoryCodes = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCSearchFollowCriteria {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetAmount: GRPCExactNumber {
    get {return _storage._targetAmount ?? GRPCExactNumber()}
    set {_uniqueStorage()._targetAmount = newValue}
  }
  /// Returns true if `targetAmount` has been explicitly set.
  var hasTargetAmount: Bool {return _storage._targetAmount != nil}
  /// Clears the value of `targetAmount`. Subsequent reads from it will return its default value.
  mutating func clearTargetAmount() {_uniqueStorage()._targetAmount = nil}

  var query: String {
    get {return _storage._query}
    set {_uniqueStorage()._query = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCSavingsFollowCriteria {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetAmount: GRPCExactNumber {
    get {return _storage._targetAmount ?? GRPCExactNumber()}
    set {_uniqueStorage()._targetAmount = newValue}
  }
  /// Returns true if `targetAmount` has been explicitly set.
  var hasTargetAmount: Bool {return _storage._targetAmount != nil}
  /// Clears the value of `targetAmount`. Subsequent reads from it will return its default value.
  mutating func clearTargetAmount() {_uniqueStorage()._targetAmount = nil}

  var accountIds: [String] {
    get {return _storage._accountIds}
    set {_uniqueStorage()._accountIds = newValue}
  }

  var period: String {
    get {return _storage._period}
    set {_uniqueStorage()._period = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCFollowData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var historicalAmounts: [GRPCPeriodExactNumberPair] {
    get {return _storage._historicalAmounts}
    set {_uniqueStorage()._historicalAmounts = newValue}
  }

  var period: GRPCPeriod {
    get {return _storage._period ?? GRPCPeriod()}
    set {_uniqueStorage()._period = newValue}
  }
  /// Returns true if `period` has been explicitly set.
  var hasPeriod: Bool {return _storage._period != nil}
  /// Clears the value of `period`. Subsequent reads from it will return its default value.
  mutating func clearPeriod() {_uniqueStorage()._period = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCPeriodExactNumberPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var period: GRPCPeriod {
    get {return _storage._period ?? GRPCPeriod()}
    set {_uniqueStorage()._period = newValue}
  }
  /// Returns true if `period` has been explicitly set.
  var hasPeriod: Bool {return _storage._period != nil}
  /// Clears the value of `period`. Subsequent reads from it will return its default value.
  mutating func clearPeriod() {_uniqueStorage()._period = nil}

  var value: GRPCExactNumber {
    get {return _storage._value ?? GRPCExactNumber()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_uniqueStorage()._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCBudget {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Specification {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    var description_p: String {
      get {return _storage._description_p}
      set {_uniqueStorage()._description_p = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var periodicity: OneOf_Periodicity? {
      get {return _storage._periodicity}
      set {_uniqueStorage()._periodicity = newValue}
    }

    var recurringPeriodicity: GRPCBudget.RecurringPeriodicity {
      get {
        if case .recurringPeriodicity(let v)? = _storage._periodicity {return v}
        return GRPCBudget.RecurringPeriodicity()
      }
      set {_uniqueStorage()._periodicity = .recurringPeriodicity(newValue)}
    }

    var oneOffPeriodicity: GRPCBudget.OneOffPeriodicity {
      get {
        if case .oneOffPeriodicity(let v)? = _storage._periodicity {return v}
        return GRPCBudget.OneOffPeriodicity()
      }
      set {_uniqueStorage()._periodicity = .oneOffPeriodicity(newValue)}
    }

    var archived: Bool {
      get {return _storage._archived}
      set {_uniqueStorage()._archived = newValue}
    }

    var filter: GRPCBudget.Filter {
      get {return _storage._filter ?? GRPCBudget.Filter()}
      set {_uniqueStorage()._filter = newValue}
    }
    /// Returns true if `filter` has been explicitly set.
    var hasFilter: Bool {return _storage._filter != nil}
    /// Clears the value of `filter`. Subsequent reads from it will return its default value.
    mutating func clearFilter() {_uniqueStorage()._filter = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Periodicity: Equatable {
      case recurringPeriodicity(GRPCBudget.RecurringPeriodicity)
      case oneOffPeriodicity(GRPCBudget.OneOffPeriodicity)

    #if !swift(>=4.1)
      static func ==(lhs: GRPCBudget.Specification.OneOf_Periodicity, rhs: GRPCBudget.Specification.OneOf_Periodicity) -> Bool {
        switch (lhs, rhs) {
        case (.recurringPeriodicity(let l), .recurringPeriodicity(let r)): return l == r
        case (.oneOffPeriodicity(let l), .oneOffPeriodicity(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Filter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var accounts: [GRPCBudget.Filter.Account] = []

    var categories: [GRPCBudget.Filter.Category] = []

    var tags: [GRPCBudget.Filter.Tag] = []

    var freeTextQuery: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Account {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var id: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Category {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var code: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct Tag {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var key: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}
  }

  struct OneOffPeriodicity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var start: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._start = newValue}
    }
    /// Returns true if `start` has been explicitly set.
    var hasStart: Bool {return _storage._start != nil}
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
    mutating func clearStart() {_uniqueStorage()._start = nil}

    var end: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._end = newValue}
    }
    /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool {return _storage._end != nil}
    /// Clears the value of `end`. Subsequent reads from it will return its default value.
    mutating func clearEnd() {_uniqueStorage()._end = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct RecurringPeriodicity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var periodUnit: GRPCBudget.RecurringPeriodicity.PeriodUnit = .unknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum PeriodUnit: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case week // = 1
      case month // = 2
      case year // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .week
        case 2: self = .month
        case 3: self = .year
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .week: return 1
        case .month: return 2
        case .year: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  struct Period {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var start: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._start = newValue}
    }
    /// Returns true if `start` has been explicitly set.
    var hasStart: Bool {return _storage._start != nil}
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
    mutating func clearStart() {_uniqueStorage()._start = nil}

    var end: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._end = newValue}
    }
    /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool {return _storage._end != nil}
    /// Clears the value of `end`. Subsequent reads from it will return its default value.
    mutating func clearEnd() {_uniqueStorage()._end = nil}

    var spentAmount: GRPCCurrencyDenominatedAmount {
      get {return _storage._spentAmount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._spentAmount = newValue}
    }
    /// Returns true if `spentAmount` has been explicitly set.
    var hasSpentAmount: Bool {return _storage._spentAmount != nil}
    /// Clears the value of `spentAmount`. Subsequent reads from it will return its default value.
    mutating func clearSpentAmount() {_uniqueStorage()._spentAmount = nil}

    var budgetAmount: GRPCCurrencyDenominatedAmount {
      get {return _storage._budgetAmount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._budgetAmount = newValue}
    }
    /// Returns true if `budgetAmount` has been explicitly set.
    var hasBudgetAmount: Bool {return _storage._budgetAmount != nil}
    /// Clears the value of `budgetAmount`. Subsequent reads from it will return its default value.
    mutating func clearBudgetAmount() {_uniqueStorage()._budgetAmount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Summary {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var budgetSpecification: GRPCBudget.Specification {
      get {return _storage._budgetSpecification ?? GRPCBudget.Specification()}
      set {_uniqueStorage()._budgetSpecification = newValue}
    }
    /// Returns true if `budgetSpecification` has been explicitly set.
    var hasBudgetSpecification: Bool {return _storage._budgetSpecification != nil}
    /// Clears the value of `budgetSpecification`. Subsequent reads from it will return its default value.
    mutating func clearBudgetSpecification() {_uniqueStorage()._budgetSpecification = nil}

    var currentBudgetPeriod: GRPCBudget.Period {
      get {return _storage._currentBudgetPeriod ?? GRPCBudget.Period()}
      set {_uniqueStorage()._currentBudgetPeriod = newValue}
    }
    /// Returns true if `currentBudgetPeriod` has been explicitly set.
    var hasCurrentBudgetPeriod: Bool {return _storage._currentBudgetPeriod != nil}
    /// Clears the value of `currentBudgetPeriod`. Subsequent reads from it will return its default value.
    mutating func clearCurrentBudgetPeriod() {_uniqueStorage()._currentBudgetPeriod = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Transaction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var dispensableAmount: GRPCCurrencyDenominatedAmount {
      get {return _storage._dispensableAmount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._dispensableAmount = newValue}
    }
    /// Returns true if `dispensableAmount` has been explicitly set.
    var hasDispensableAmount: Bool {return _storage._dispensableAmount != nil}
    /// Clears the value of `dispensableAmount`. Subsequent reads from it will return its default value.
    mutating func clearDispensableAmount() {_uniqueStorage()._dispensableAmount = nil}

    var date: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._date = newValue}
    }
    /// Returns true if `date` has been explicitly set.
    var hasDate: Bool {return _storage._date != nil}
    /// Clears the value of `date`. Subsequent reads from it will return its default value.
    mutating func clearDate() {_uniqueStorage()._date = nil}

    var description_p: String {
      get {return _storage._description_p}
      set {_uniqueStorage()._description_p = newValue}
    }

    var categoryCode: String {
      get {return _storage._categoryCode}
      set {_uniqueStorage()._categoryCode = newValue}
    }

    var accountID: String {
      get {return _storage._accountID}
      set {_uniqueStorage()._accountID = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct GRPCCurrency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var factor: GRPCExactNumber {
    get {return _storage._factor ?? GRPCExactNumber()}
    set {_uniqueStorage()._factor = newValue}
  }
  /// Returns true if `factor` has been explicitly set.
  var hasFactor: Bool {return _storage._factor != nil}
  /// Clears the value of `factor`. Subsequent reads from it will return its default value.
  mutating func clearFactor() {_uniqueStorage()._factor = nil}

  var prefixed: Bool {
    get {return _storage._prefixed}
    set {_uniqueStorage()._prefixed = newValue}
  }

  var symbol: String {
    get {return _storage._symbol}
    set {_uniqueStorage()._symbol = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCLoan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  var interest: GRPCExactNumber {
    get {return _storage._interest ?? GRPCExactNumber()}
    set {_uniqueStorage()._interest = newValue}
  }
  /// Returns true if `interest` has been explicitly set.
  var hasInterest: Bool {return _storage._interest != nil}
  /// Clears the value of `interest`. Subsequent reads from it will return its default value.
  mutating func clearInterest() {_uniqueStorage()._interest = nil}

  var numberOfMonthsBound: Int32 {
    get {return _storage._numberOfMonthsBound}
    set {_uniqueStorage()._numberOfMonthsBound = newValue}
  }

  var type: GRPCLoan.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case mortgage // = 1
    case blanco // = 2
    case membership // = 3
    case vehicle // = 4
    case land // = 5
    case student // = 6
    case other // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .mortgage
      case 2: self = .blanco
      case 3: self = .membership
      case 4: self = .vehicle
      case 5: self = .land
      case 6: self = .student
      case 7: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .mortgage: return 1
      case .blanco: return 2
      case .membership: return 3
      case .vehicle: return 4
      case .land: return 5
      case .student: return 6
      case .other: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCLoan.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCLoan.TypeEnum] = [
    .unknown,
    .mortgage,
    .blanco,
    .membership,
    .vehicle,
    .land,
    .student,
    .other,
  ]
}

#endif  // swift(>=4.2)

struct GRPCCategoryTree {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var expenses: GRPCCategoryNode {
    get {return _storage._expenses ?? GRPCCategoryNode()}
    set {_uniqueStorage()._expenses = newValue}
  }
  /// Returns true if `expenses` has been explicitly set.
  var hasExpenses: Bool {return _storage._expenses != nil}
  /// Clears the value of `expenses`. Subsequent reads from it will return its default value.
  mutating func clearExpenses() {_uniqueStorage()._expenses = nil}

  var income: GRPCCategoryNode {
    get {return _storage._income ?? GRPCCategoryNode()}
    set {_uniqueStorage()._income = newValue}
  }
  /// Returns true if `income` has been explicitly set.
  var hasIncome: Bool {return _storage._income != nil}
  /// Clears the value of `income`. Subsequent reads from it will return its default value.
  mutating func clearIncome() {_uniqueStorage()._income = nil}

  var transfers: GRPCCategoryNode {
    get {return _storage._transfers ?? GRPCCategoryNode()}
    set {_uniqueStorage()._transfers = newValue}
  }
  /// Returns true if `transfers` has been explicitly set.
  var hasTransfers: Bool {return _storage._transfers != nil}
  /// Clears the value of `transfers`. Subsequent reads from it will return its default value.
  mutating func clearTransfers() {_uniqueStorage()._transfers = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCCategoryNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var id: String = String()

  var name: String = String()

  var children: [GRPCCategoryNode] = []

  var sortOrder: Int32 = 0

  var defaultChild: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCDevice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var notificationToken: String = String()

  var notificationPublicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCDeviceAppsFlyerOrigin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var extraParam1: String = String()

  var extraParam2: String = String()

  var extraParam3: String = String()

  var extraParam4: String = String()

  var extraParam5: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCDeviceFacebookOrigin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var campaignID: String = String()

  var adGroupID: String = String()

  var adGroupName: String = String()

  var adSetID: String = String()

  var adSetName: String = String()

  var adID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCProviderFieldSpecification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: String = String()

  var hint: String = String()

  var maxLength: Int32 = 0

  var minLength: Int32 = 0

  var masked: Bool = false

  var numeric: Bool = false

  var immutable: Bool = false

  var optional: Bool = false

  var name: String = String()

  var value: String = String()

  var pattern: String = String()

  var patternError: String = String()

  var helpText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCGiroLookupEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  var identifier: String {
    get {return _storage._identifier}
    set {_uniqueStorage()._identifier = newValue}
  }

  var images: GRPCImages {
    get {return _storage._images ?? GRPCImages()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  mutating func clearImages() {_uniqueStorage()._images = nil}

  var displayNumber: String {
    get {return _storage._displayNumber}
    set {_uniqueStorage()._displayNumber = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCImages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iconURL: String = String()

  var bannerURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCSignableOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var created: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._created ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._created = newValue}
  }
  /// Returns true if `created` has been explicitly set.
  var hasCreated: Bool {return _storage._created != nil}
  /// Clears the value of `created`. Subsequent reads from it will return its default value.
  mutating func clearCreated() {_uniqueStorage()._created = nil}

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var status: GRPCSignableOperation.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var statusMessage: String {
    get {return _storage._statusMessage}
    set {_uniqueStorage()._statusMessage = newValue}
  }

  var type: GRPCSignableOperation.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var underlyingID: String {
    get {return _storage._underlyingID}
    set {_uniqueStorage()._underlyingID = newValue}
  }

  var updated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updated = newValue}
  }
  /// Returns true if `updated` has been explicitly set.
  var hasUpdated: Bool {return _storage._updated != nil}
  /// Clears the value of `updated`. Subsequent reads from it will return its default value.
  mutating func clearUpdated() {_uniqueStorage()._updated = nil}

  var credentialID: String {
    get {return _storage._credentialID}
    set {_uniqueStorage()._credentialID = newValue}
  }

  var thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication {
    get {return _storage._thirdPartyAppAuthentication ?? GRPCThirdPartyAppAuthentication()}
    set {_uniqueStorage()._thirdPartyAppAuthentication = newValue}
  }
  /// Returns true if `thirdPartyAppAuthentication` has been explicitly set.
  var hasThirdPartyAppAuthentication: Bool {return _storage._thirdPartyAppAuthentication != nil}
  /// Clears the value of `thirdPartyAppAuthentication`. Subsequent reads from it will return its default value.
  mutating func clearThirdPartyAppAuthentication() {_uniqueStorage()._thirdPartyAppAuthentication = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case created // = 1
    case executing // = 2
    case awaitingCredentials // = 3
    case cancelled // = 4
    case failed // = 5
    case executed // = 6
    case awaitingThirdPartyAppAuthentication // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .created
      case 2: self = .executing
      case 3: self = .awaitingCredentials
      case 4: self = .cancelled
      case 5: self = .failed
      case 6: self = .executed
      case 7: self = .awaitingThirdPartyAppAuthentication
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .created: return 1
      case .executing: return 2
      case .awaitingCredentials: return 3
      case .cancelled: return 4
      case .failed: return 5
      case .executed: return 6
      case .awaitingThirdPartyAppAuthentication: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case transfer // = 1
    case accountCreate // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .transfer
      case 2: self = .accountCreate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .transfer: return 1
      case .accountCreate: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCSignableOperation.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCSignableOperation.Status] = [
    .unknown,
    .created,
    .executing,
    .awaitingCredentials,
    .cancelled,
    .failed,
    .executed,
    .awaitingThirdPartyAppAuthentication,
  ]
}

extension GRPCSignableOperation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCSignableOperation.TypeEnum] = [
    .unknown,
    .transfer,
    .accountCreate,
  ]
}

#endif  // swift(>=4.2)

struct GRPCTrackingEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var category: String {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  var action: String {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  var defaultValue: Int64 {
    get {return _storage._defaultValue}
    set {_uniqueStorage()._defaultValue = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCTrackingTiming {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var category: String {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCTrackingView {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCTransactionCluster {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var transactions: [GRPCTransaction] {
    get {return _storage._transactions}
    set {_uniqueStorage()._transactions = newValue}
  }

  var score: GRPCExactNumber {
    get {return _storage._score ?? GRPCExactNumber()}
    set {_uniqueStorage()._score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return _storage._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {_uniqueStorage()._score = nil}

  var categorizationImprovement: GRPCExactNumber {
    get {return _storage._categorizationImprovement ?? GRPCExactNumber()}
    set {_uniqueStorage()._categorizationImprovement = newValue}
  }
  /// Returns true if `categorizationImprovement` has been explicitly set.
  var hasCategorizationImprovement: Bool {return _storage._categorizationImprovement != nil}
  /// Clears the value of `categorizationImprovement`. Subsequent reads from it will return its default value.
  mutating func clearCategorizationImprovement() {_uniqueStorage()._categorizationImprovement = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCTransferDestination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var balance: GRPCCurrencyDenominatedAmount {
    get {return _storage._balance ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {_uniqueStorage()._balance = nil}

  var displayBankName: String {
    get {return _storage._displayBankName}
    set {_uniqueStorage()._displayBankName = newValue}
  }

  var type: GRPCAccount.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var images: GRPCImages {
    get {return _storage._images ?? GRPCImages()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  mutating func clearImages() {_uniqueStorage()._images = nil}

  var displayAccountNumber: String {
    get {return _storage._displayAccountNumber}
    set {_uniqueStorage()._displayAccountNumber = newValue}
  }

  var matchesMultiple: Bool {
    get {return _storage._matchesMultiple}
    set {_uniqueStorage()._matchesMultiple = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCTransferDestinationPerAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var destinations: [GRPCTransferDestination] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: GRPCCurrencyDenominatedAmount {
    get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var credentialID: String {
    get {return _storage._credentialID}
    set {_uniqueStorage()._credentialID = newValue}
  }

  var destinationUri: String {
    get {return _storage._destinationUri}
    set {_uniqueStorage()._destinationUri = newValue}
  }

  var destinationMessage: String {
    get {return _storage._destinationMessage}
    set {_uniqueStorage()._destinationMessage = newValue}
  }

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var sourceUri: String {
    get {return _storage._sourceUri}
    set {_uniqueStorage()._sourceUri = newValue}
  }

  var sourceMessage: String {
    get {return _storage._sourceMessage}
    set {_uniqueStorage()._sourceMessage = newValue}
  }

  var type: GRPCTransfer.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var dueDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._dueDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._dueDate = newValue}
  }
  /// Returns true if `dueDate` has been explicitly set.
  var hasDueDate: Bool {return _storage._dueDate != nil}
  /// Clears the value of `dueDate`. Subsequent reads from it will return its default value.
  mutating func clearDueDate() {_uniqueStorage()._dueDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case einvoice // = 1
    case payment // = 2
    case bankTransfer // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .einvoice
      case 2: self = .payment
      case 3: self = .bankTransfer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .einvoice: return 1
      case .payment: return 2
      case .bankTransfer: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCTransfer.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCTransfer.TypeEnum] = [
    .unknown,
    .einvoice,
    .payment,
    .bankTransfer,
  ]
}

#endif  // swift(>=4.2)

struct GRPCUserProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  var nationalID: String {
    get {return _storage._nationalID}
    set {_uniqueStorage()._nationalID = newValue}
  }

  /// The login methods that the user is authorized to use, for example `BANKID`.
  var authorizedLoginMethods: [GRPCAuthenticationMethod] {
    get {return _storage._authorizedLoginMethods}
    set {_uniqueStorage()._authorizedLoginMethods = newValue}
  }

  /// The login methods that are available on the market, for example `EMAIL_AND_PASSWORD` and `BANKID`.
  var availableLoginMethods: [GRPCAuthenticationMethod] {
    get {return _storage._availableLoginMethods}
    set {_uniqueStorage()._availableLoginMethods = newValue}
  }

  var createdDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return _storage._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCUserConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var flags: [String] {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  var i18NConfiguration: GRPCUserConfiguration.I18NConfiguration {
    get {return _storage._i18NConfiguration ?? GRPCUserConfiguration.I18NConfiguration()}
    set {_uniqueStorage()._i18NConfiguration = newValue}
  }
  /// Returns true if `i18NConfiguration` has been explicitly set.
  var hasI18NConfiguration: Bool {return _storage._i18NConfiguration != nil}
  /// Clears the value of `i18NConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearI18NConfiguration() {_uniqueStorage()._i18NConfiguration = nil}

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct I18NConfiguration {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var currencyCode: String = String()

    var localeCode: String = String()

    var marketCode: String = String()

    var timezoneCode: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCI18NSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var localeCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCPeriodSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var periodDateBreakType: GRPCPeriodDateBreakType = .unknown

  var monthlyAdjustedDay: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCNotificationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groups: [GRPCNotificationGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCNotificationGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var notificationTypes: [GRPCNotificationType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCNotificationType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var title: String = String()

  var enabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCUserOrigin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var serviceName: String {
    get {return _storage._serviceName}
    set {_uniqueStorage()._serviceName = newValue}
  }

  var organic: Bool {
    get {return _storage._organic}
    set {_uniqueStorage()._organic = newValue}
  }

  var externalServiceID: String {
    get {return _storage._externalServiceID}
    set {_uniqueStorage()._externalServiceID = newValue}
  }

  var mediaSource: String {
    get {return _storage._mediaSource}
    set {_uniqueStorage()._mediaSource = newValue}
  }

  var campaign: String {
    get {return _storage._campaign}
    set {_uniqueStorage()._campaign = newValue}
  }

  var agency: String {
    get {return _storage._agency}
    set {_uniqueStorage()._agency = newValue}
  }

  var clickTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._clickTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._clickTime = newValue}
  }
  /// Returns true if `clickTime` has been explicitly set.
  var hasClickTime: Bool {return _storage._clickTime != nil}
  /// Clears the value of `clickTime`. Subsequent reads from it will return its default value.
  mutating func clearClickTime() {_uniqueStorage()._clickTime = nil}

  var installTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._installTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._installTime = newValue}
  }
  /// Returns true if `installTime` has been explicitly set.
  var hasInstallTime: Bool {return _storage._installTime != nil}
  /// Clears the value of `installTime`. Subsequent reads from it will return its default value.
  mutating func clearInstallTime() {_uniqueStorage()._installTime = nil}

  var extraParam1: String {
    get {return _storage._extraParam1}
    set {_uniqueStorage()._extraParam1 = newValue}
  }

  var extraParam2: String {
    get {return _storage._extraParam2}
    set {_uniqueStorage()._extraParam2 = newValue}
  }

  var extraParam3: String {
    get {return _storage._extraParam3}
    set {_uniqueStorage()._extraParam3 = newValue}
  }

  var extraParam4: String {
    get {return _storage._extraParam4}
    set {_uniqueStorage()._extraParam4 = newValue}
  }

  var extraParam5: String {
    get {return _storage._extraParam5}
    set {_uniqueStorage()._extraParam5 = newValue}
  }

  var facebookAd: GRPCFacebookAd {
    get {return _storage._facebookAd ?? GRPCFacebookAd()}
    set {_uniqueStorage()._facebookAd = newValue}
  }
  /// Returns true if `facebookAd` has been explicitly set.
  var hasFacebookAd: Bool {return _storage._facebookAd != nil}
  /// Clears the value of `facebookAd`. Subsequent reads from it will return its default value.
  mutating func clearFacebookAd() {_uniqueStorage()._facebookAd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCFacebookAd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: String = String()

  var groupName: String = String()

  var campaignID: String = String()

  var adSetID: String = String()

  var adSetName: String = String()

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCAuthenticationKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyType: GRPCAuthenticationKeyType = .keyTypeUnknown

  var id: String = String()

  var key: String = String()

  var source: GRPCAuthenticationSource = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityEventAnswer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var key: GRPCIdentityAnswerKey = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var seen: Bool {
    get {return _storage._seen}
    set {_uniqueStorage()._seen = newValue}
  }

  var question: String {
    get {return _storage._question}
    set {_uniqueStorage()._question = newValue}
  }

  var potentialAnswers: [GRPCIdentityEventAnswer] {
    get {return _storage._potentialAnswers}
    set {_uniqueStorage()._potentialAnswers = newValue}
  }

  var answer: GRPCIdentityDocumentedAnswer {
    get {return _storage._answer ?? GRPCIdentityDocumentedAnswer()}
    set {_uniqueStorage()._answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  var hasAnswer: Bool {return _storage._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  mutating func clearAnswer() {_uniqueStorage()._answer = nil}

  var documentation: GRPCIdentityEventDocumentation {
    get {return _storage._documentation ?? GRPCIdentityEventDocumentation()}
    set {_uniqueStorage()._documentation = newValue}
  }
  /// Returns true if `documentation` has been explicitly set.
  var hasDocumentation: Bool {return _storage._documentation != nil}
  /// Clears the value of `documentation`. Subsequent reads from it will return its default value.
  mutating func clearDocumentation() {_uniqueStorage()._documentation = nil}

  var transactions: [GRPCTransaction] {
    get {return _storage._transactions}
    set {_uniqueStorage()._transactions = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityEventSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var seen: Bool {
    get {return _storage._seen}
    set {_uniqueStorage()._seen = newValue}
  }

  var answer: GRPCIdentityDocumentedAnswer {
    get {return _storage._answer ?? GRPCIdentityDocumentedAnswer()}
    set {_uniqueStorage()._answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  var hasAnswer: Bool {return _storage._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  mutating func clearAnswer() {_uniqueStorage()._answer = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityEventDocumentation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var source: String = String()

  var infoTitle: String = String()

  var infoBody: String = String()

  var helpTitle: String = String()

  var helpBody: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityStateAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var postalCode: String = String()

  var city: String = String()

  var community: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityStateProperty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var municipality: String {
    get {return _storage._municipality}
    set {_uniqueStorage()._municipality = newValue}
  }

  var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  var acquisitionDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._acquisitionDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._acquisitionDate = newValue}
  }
  /// Returns true if `acquisitionDate` has been explicitly set.
  var hasAcquisitionDate: Bool {return _storage._acquisitionDate != nil}
  /// Clears the value of `acquisitionDate`. Subsequent reads from it will return its default value.
  mutating func clearAcquisitionDate() {_uniqueStorage()._acquisitionDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityStateCompany {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var number: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityStateRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityStateCompanyEngagement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var company: GRPCIdentityStateCompany {
    get {return _storage._company ?? GRPCIdentityStateCompany()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  mutating func clearCompany() {_uniqueStorage()._company = nil}

  var roles: [GRPCIdentityStateRole] {
    get {return _storage._roles}
    set {_uniqueStorage()._roles = newValue}
  }

  var dateIn: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._dateIn ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._dateIn = newValue}
  }
  /// Returns true if `dateIn` has been explicitly set.
  var hasDateIn: Bool {return _storage._dateIn != nil}
  /// Clears the value of `dateIn`. Subsequent reads from it will return its default value.
  mutating func clearDateIn() {_uniqueStorage()._dateIn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityStateCreditScore {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var score: Int32 = 0

  var maxScore: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCIdentityStateTaxDeclaration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var finalTax: GRPCCurrencyDenominatedAmount {
    get {return _storage._finalTax ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._finalTax = newValue}
  }
  /// Returns true if `finalTax` has been explicitly set.
  var hasFinalTax: Bool {return _storage._finalTax != nil}
  /// Clears the value of `finalTax`. Subsequent reads from it will return its default value.
  mutating func clearFinalTax() {_uniqueStorage()._finalTax = nil}

  var totalIncome: GRPCCurrencyDenominatedAmount {
    get {return _storage._totalIncome ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._totalIncome = newValue}
  }
  /// Returns true if `totalIncome` has been explicitly set.
  var hasTotalIncome: Bool {return _storage._totalIncome != nil}
  /// Clears the value of `totalIncome`. Subsequent reads from it will return its default value.
  mutating func clearTotalIncome() {_uniqueStorage()._totalIncome = nil}

  var incomeByService: GRPCCurrencyDenominatedAmount {
    get {return _storage._incomeByService ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._incomeByService = newValue}
  }
  /// Returns true if `incomeByService` has been explicitly set.
  var hasIncomeByService: Bool {return _storage._incomeByService != nil}
  /// Clears the value of `incomeByService`. Subsequent reads from it will return its default value.
  mutating func clearIncomeByService() {_uniqueStorage()._incomeByService = nil}

  var incomeByCapital: GRPCCurrencyDenominatedAmount {
    get {return _storage._incomeByCapital ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._incomeByCapital = newValue}
  }
  /// Returns true if `incomeByCapital` has been explicitly set.
  var hasIncomeByCapital: Bool {return _storage._incomeByCapital != nil}
  /// Clears the value of `incomeByCapital`. Subsequent reads from it will return its default value.
  mutating func clearIncomeByCapital() {_uniqueStorage()._incomeByCapital = nil}

  var year: Int32 {
    get {return _storage._year}
    set {_uniqueStorage()._year = newValue}
  }

  var registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._registeredDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._registeredDate = newValue}
  }
  /// Returns true if `registeredDate` has been explicitly set.
  var hasRegisteredDate: Bool {return _storage._registeredDate != nil}
  /// Clears the value of `registeredDate`. Subsequent reads from it will return its default value.
  mutating func clearRegisteredDate() {_uniqueStorage()._registeredDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityStateRecordOfNonPayment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var amount: GRPCCurrencyDenominatedAmount {
    get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._registeredDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._registeredDate = newValue}
  }
  /// Returns true if `registeredDate` has been explicitly set.
  var hasRegisteredDate: Bool {return _storage._registeredDate != nil}
  /// Clears the value of `registeredDate`. Subsequent reads from it will return its default value.
  mutating func clearRegisteredDate() {_uniqueStorage()._registeredDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityStateOutstandingDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: GRPCCurrencyDenominatedAmount {
    get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var number: Int32 {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  var registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._registeredDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._registeredDate = newValue}
  }
  /// Returns true if `registeredDate` has been explicitly set.
  var hasRegisteredDate: Bool {return _storage._registeredDate != nil}
  /// Clears the value of `registeredDate`. Subsequent reads from it will return its default value.
  mutating func clearRegisteredDate() {_uniqueStorage()._registeredDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  var nationalID: String {
    get {return _storage._nationalID}
    set {_uniqueStorage()._nationalID = newValue}
  }

  var address: GRPCIdentityStateAddress {
    get {return _storage._address ?? GRPCIdentityStateAddress()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {_uniqueStorage()._address = nil}

  var properties: [GRPCIdentityStateProperty] {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  var companyEngagements: [GRPCIdentityStateCompanyEngagement] {
    get {return _storage._companyEngagements}
    set {_uniqueStorage()._companyEngagements = newValue}
  }

  var creditScore: GRPCIdentityStateCreditScore {
    get {return _storage._creditScore ?? GRPCIdentityStateCreditScore()}
    set {_uniqueStorage()._creditScore = newValue}
  }
  /// Returns true if `creditScore` has been explicitly set.
  var hasCreditScore: Bool {return _storage._creditScore != nil}
  /// Clears the value of `creditScore`. Subsequent reads from it will return its default value.
  mutating func clearCreditScore() {_uniqueStorage()._creditScore = nil}

  var mostRecentTaxDeclaration: GRPCIdentityStateTaxDeclaration {
    get {return _storage._mostRecentTaxDeclaration ?? GRPCIdentityStateTaxDeclaration()}
    set {_uniqueStorage()._mostRecentTaxDeclaration = newValue}
  }
  /// Returns true if `mostRecentTaxDeclaration` has been explicitly set.
  var hasMostRecentTaxDeclaration: Bool {return _storage._mostRecentTaxDeclaration != nil}
  /// Clears the value of `mostRecentTaxDeclaration`. Subsequent reads from it will return its default value.
  mutating func clearMostRecentTaxDeclaration() {_uniqueStorage()._mostRecentTaxDeclaration = nil}

  var recordsOfNonPayment: [GRPCIdentityStateRecordOfNonPayment] {
    get {return _storage._recordsOfNonPayment}
    set {_uniqueStorage()._recordsOfNonPayment = newValue}
  }

  var outstandingDebt: GRPCIdentityStateOutstandingDebt {
    get {return _storage._outstandingDebt ?? GRPCIdentityStateOutstandingDebt()}
    set {_uniqueStorage()._outstandingDebt = newValue}
  }
  /// Returns true if `outstandingDebt` has been explicitly set.
  var hasOutstandingDebt: Bool {return _storage._outstandingDebt != nil}
  /// Clears the value of `outstandingDebt`. Subsequent reads from it will return its default value.
  mutating func clearOutstandingDebt() {_uniqueStorage()._outstandingDebt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCIdentityDocumentedAnswer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var answer: GRPCIdentityAnswerKey = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCConsent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var version: String = String()

  var title: String = String()

  var body: String = String()

  var checksum: String = String()

  var messages: [GRPCConsentMessage] = []

  var attachments: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCUserConsent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  var action: GRPCConsentAction {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCConsentMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var links: [GRPCConsentMessageLink] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCConsentMessageLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var to: String = String()

  var start: Int32 = 0

  var end: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCThirdPartyAppAuthentication {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var downloadTitle: String {
    get {return _storage._downloadTitle}
    set {_uniqueStorage()._downloadTitle = newValue}
  }

  var downloadMessage: String {
    get {return _storage._downloadMessage}
    set {_uniqueStorage()._downloadMessage = newValue}
  }

  var upgradeTitle: String {
    get {return _storage._upgradeTitle}
    set {_uniqueStorage()._upgradeTitle = newValue}
  }

  var upgradeMessage: String {
    get {return _storage._upgradeMessage}
    set {_uniqueStorage()._upgradeMessage = newValue}
  }

  var ios: GRPCThirdPartyAppAuthentication.Ios {
    get {return _storage._ios ?? GRPCThirdPartyAppAuthentication.Ios()}
    set {_uniqueStorage()._ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  var hasIos: Bool {return _storage._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
  mutating func clearIos() {_uniqueStorage()._ios = nil}

  var android: GRPCThirdPartyAppAuthentication.Android {
    get {return _storage._android ?? GRPCThirdPartyAppAuthentication.Android()}
    set {_uniqueStorage()._android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
  var hasAndroid: Bool {return _storage._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
  mutating func clearAndroid() {_uniqueStorage()._android = nil}

  var web: GRPCThirdPartyAppAuthentication.Web {
    get {return _storage._web ?? GRPCThirdPartyAppAuthentication.Web()}
    set {_uniqueStorage()._web = newValue}
  }
  /// Returns true if `web` has been explicitly set.
  var hasWeb: Bool {return _storage._web != nil}
  /// Clears the value of `web`. Subsequent reads from it will return its default value.
  mutating func clearWeb() {_uniqueStorage()._web = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Ios {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appStoreURL: String = String()

    var scheme: String = String()

    var deepLinkURL: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Android {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packageName: String = String()

    var requiredMinimumVersion: Int32 = 0

    var intent: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Web {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var url: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Wrap lists in objects, Only used in streaming
/// Since we stream lists, we have to encapsulate them in objects so we can see the difference between empty lists that need action and those that don't
struct GRPCCredentials {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var credential: [GRPCCredential] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCAccounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: [GRPCAccount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCTransactions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transaction: [GRPCTransaction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCProviders {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var provider: [GRPCProvider] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCPeriods {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var period: Dictionary<String,GRPCPeriod> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCFollowItems {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var followItem: [GRPCFollowItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCSignableOperations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signableOperation: [GRPCSignableOperation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCBudgetSummaries {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var budgetSummaries: [GRPCBudget.Summary] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCInsights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var insights: [GRPCInsight] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCInsightsCategories {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var body: String = String()

  var amountByCategoryCode: [GRPCInsightsCategories.AmountByCategoryCode] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AmountByCategoryCode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var categoryCode: String {
      get {return _storage._categoryCode}
      set {_uniqueStorage()._categoryCode = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct GRPCInsightsMortgage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var body: String = String()

  var distribution: [GRPCInsightsMortgage.HistogramBucket] = []

  var interestRate: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct HistogramBucket {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lowerEndpoint: Double = 0

    var upperEndpoint: Double = 0

    var frequency: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct GRPCInsightsSavings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var body: String {
    get {return _storage._body}
    set {_uniqueStorage()._body = newValue}
  }

  var amount: GRPCCurrencyDenominatedAmount {
    get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCInsightsDailySpend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var body: String = String()

  var amountByWeekday: [GRPCInsightsDailySpend.AmountByWeekday] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AmountByWeekday {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var weekday: String {
      get {return _storage._weekday}
      set {_uniqueStorage()._weekday = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct GRPCInsightsLeftToSpend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var body: String = String()

  var leftToSpendByPeriod: [GRPCInsightsLeftToSpend.LeftToSpendByPeriod] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct LeftToSpendByPeriod {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var period: String = String()

    var percentage: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct GRPCBusinessDays {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var year: UInt32 = 0

  var month: UInt32 = 0

  var days: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCErrorCode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCProperty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var propertyID: String {
    get {return _storage._propertyID}
    set {_uniqueStorage()._propertyID = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var postalCode: String {
    get {return _storage._postalCode}
    set {_uniqueStorage()._postalCode = newValue}
  }

  var city: String {
    get {return _storage._city}
    set {_uniqueStorage()._city = newValue}
  }

  var community: String {
    get {return _storage._community}
    set {_uniqueStorage()._community = newValue}
  }

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var type: GRPCProperty.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var numberOfRooms: Int32 {
    get {return _storage._numberOfRooms}
    set {_uniqueStorage()._numberOfRooms = newValue}
  }

  var numberOfSquareMeters: Int32 {
    get {return _storage._numberOfSquareMeters}
    set {_uniqueStorage()._numberOfSquareMeters = newValue}
  }

  /// Deprecated, use "valuation_amount"
  var valuation: Int32 {
    get {return _storage._valuation}
    set {_uniqueStorage()._valuation = newValue}
  }

  var loanAccountIds: [String] {
    get {return _storage._loanAccountIds}
    set {_uniqueStorage()._loanAccountIds = newValue}
  }

  var registeredAddress: Bool {
    get {return _storage._registeredAddress}
    set {_uniqueStorage()._registeredAddress = newValue}
  }

  var userModifiedLoanAccountIds: Bool {
    get {return _storage._userModifiedLoanAccountIds}
    set {_uniqueStorage()._userModifiedLoanAccountIds = newValue}
  }

  var valuationAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._valuationAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._valuationAmount = newValue}
  }
  /// Returns true if `valuationAmount` has been explicitly set.
  var hasValuationAmount: Bool {return _storage._valuationAmount != nil}
  /// Clears the value of `valuationAmount`. Subsequent reads from it will return its default value.
  mutating func clearValuationAmount() {_uniqueStorage()._valuationAmount = nil}

  var totalLoanAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._totalLoanAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._totalLoanAmount = newValue}
  }
  /// Returns true if `totalLoanAmount` has been explicitly set.
  var hasTotalLoanAmount: Bool {return _storage._totalLoanAmount != nil}
  /// Clears the value of `totalLoanAmount`. Subsequent reads from it will return its default value.
  mutating func clearTotalLoanAmount() {_uniqueStorage()._totalLoanAmount = nil}

  var averageInterestRate: GRPCExactNumber {
    get {return _storage._averageInterestRate ?? GRPCExactNumber()}
    set {_uniqueStorage()._averageInterestRate = newValue}
  }
  /// Returns true if `averageInterestRate` has been explicitly set.
  var hasAverageInterestRate: Bool {return _storage._averageInterestRate != nil}
  /// Clears the value of `averageInterestRate`. Subsequent reads from it will return its default value.
  mutating func clearAverageInterestRate() {_uniqueStorage()._averageInterestRate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case propertyTypeUnknown // = 0
    case propertyTypeHouse // = 1
    case propertyTypeApartment // = 2
    case propertyTypeVacationHouse // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .propertyTypeUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .propertyTypeUnknown
      case 1: self = .propertyTypeHouse
      case 2: self = .propertyTypeApartment
      case 3: self = .propertyTypeVacationHouse
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .propertyTypeUnknown: return 0
      case .propertyTypeHouse: return 1
      case .propertyTypeApartment: return 2
      case .propertyTypeVacationHouse: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCProperty.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProperty.TypeEnum] = [
    .propertyTypeUnknown,
    .propertyTypeHouse,
    .propertyTypeApartment,
    .propertyTypeVacationHouse,
  ]
}

#endif  // swift(>=4.2)

struct GRPCMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var label: String = String()

  var status: GRPCMarketStatus = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCProviderMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCPropertyValuationEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var propertyID: String {
    get {return _storage._propertyID}
    set {_uniqueStorage()._propertyID = newValue}
  }

  var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var valuationAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._valuationAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._valuationAmount = newValue}
  }
  /// Returns true if `valuationAmount` has been explicitly set.
  var hasValuationAmount: Bool {return _storage._valuationAmount != nil}
  /// Clears the value of `valuationAmount`. Subsequent reads from it will return its default value.
  mutating func clearValuationAmount() {_uniqueStorage()._valuationAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCPropertyValuationSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var propertyID: String {
    get {return _storage._propertyID}
    set {_uniqueStorage()._propertyID = newValue}
  }

  var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return _storage._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {_uniqueStorage()._from = nil}

  var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  var hasTo: Bool {return _storage._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  mutating func clearTo() {_uniqueStorage()._to = nil}

  var fromValuationAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._fromValuationAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._fromValuationAmount = newValue}
  }
  /// Returns true if `fromValuationAmount` has been explicitly set.
  var hasFromValuationAmount: Bool {return _storage._fromValuationAmount != nil}
  /// Clears the value of `fromValuationAmount`. Subsequent reads from it will return its default value.
  mutating func clearFromValuationAmount() {_uniqueStorage()._fromValuationAmount = nil}

  var toValuationAmount: GRPCCurrencyDenominatedAmount {
    get {return _storage._toValuationAmount ?? GRPCCurrencyDenominatedAmount()}
    set {_uniqueStorage()._toValuationAmount = newValue}
  }
  /// Returns true if `toValuationAmount` has been explicitly set.
  var hasToValuationAmount: Bool {return _storage._toValuationAmount != nil}
  /// Clears the value of `toValuationAmount`. Subsequent reads from it will return its default value.
  mutating func clearToValuationAmount() {_uniqueStorage()._toValuationAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCInsight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var score: GRPCExactNumber {
    get {return _storage._score ?? GRPCExactNumber()}
    set {_uniqueStorage()._score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return _storage._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {_uniqueStorage()._score = nil}

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  var hasCreatedTime: Bool {return _storage._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedTime() {_uniqueStorage()._createdTime = nil}

  var expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expirationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  var dataSets: [GRPCInsightDataSet] {
    get {return _storage._dataSets}
    set {_uniqueStorage()._dataSets = newValue}
  }

  var actions: [GRPCInsightAction] {
    get {return _storage._actions}
    set {_uniqueStorage()._actions = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCArchivedInsight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var score: GRPCExactNumber {
    get {return _storage._score ?? GRPCExactNumber()}
    set {_uniqueStorage()._score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return _storage._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {_uniqueStorage()._score = nil}

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  var hasCreatedTime: Bool {return _storage._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  mutating func clearCreatedTime() {_uniqueStorage()._createdTime = nil}

  var archivedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._archivedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._archivedTime = newValue}
  }
  /// Returns true if `archivedTime` has been explicitly set.
  var hasArchivedTime: Bool {return _storage._archivedTime != nil}
  /// Clears the value of `archivedTime`. Subsequent reads from it will return its default value.
  mutating func clearArchivedTime() {_uniqueStorage()._archivedTime = nil}

  var dataSets: [GRPCInsightDataSet] {
    get {return _storage._dataSets}
    set {_uniqueStorage()._dataSets = newValue}
  }

  var action: GRPCInsightAction {
    get {return _storage._action ?? GRPCInsightAction()}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {_uniqueStorage()._action = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCInsightDataSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var dataSeries: [GRPCInsightDataSet.DataSeries] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct DataSeries {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var type: String = String()

    var dataPoints: [GRPCInsightDataSet.DataSeries.DataPoint] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct DataPoint {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var x: Double = 0

      var y: Double = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}
  }

  init() {}
}

struct GRPCInsightAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var target: String = String()

  var type: GRPCInsightAction.TypeEnum = .unknown

  var method: GRPCInsightAction.Method = .unknown

  var group: GRPCInsightAction.Group = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case primary // = 1
    case secondary // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .primary
      case 2: self = .secondary
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .primary: return 1
      case .secondary: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Method: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case acknowledge // = 1
    case create // = 2
    case add // = 3
    case goTo // = 4
    case edit // = 5
    case notNow // = 6
    case dismiss // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .acknowledge
      case 2: self = .create
      case 3: self = .add
      case 4: self = .goTo
      case 5: self = .edit
      case 6: self = .notNow
      case 7: self = .dismiss
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .acknowledge: return 1
      case .create: return 2
      case .add: return 3
      case .goTo: return 4
      case .edit: return 5
      case .notNow: return 6
      case .dismiss: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Group: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case educating // = 1
    case encouraging // = 2
    case funFact // = 3
    case productSuggest // = 4
    case promotion // = 5
    case reminder // = 6
    case sourceData // = 7
    case suggestion // = 8
    case summary // = 9
    case warning // = 10
    case budget // = 11
    case account // = 12
    case categorization // = 13
    case credentials // = 14
    case invoice // = 15
    case fraud // = 16
    case leftToSpend // = 17
    case transfer // = 18
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .educating
      case 2: self = .encouraging
      case 3: self = .funFact
      case 4: self = .productSuggest
      case 5: self = .promotion
      case 6: self = .reminder
      case 7: self = .sourceData
      case 8: self = .suggestion
      case 9: self = .summary
      case 10: self = .warning
      case 11: self = .budget
      case 12: self = .account
      case 13: self = .categorization
      case 14: self = .credentials
      case 15: self = .invoice
      case 16: self = .fraud
      case 17: self = .leftToSpend
      case 18: self = .transfer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .educating: return 1
      case .encouraging: return 2
      case .funFact: return 3
      case .productSuggest: return 4
      case .promotion: return 5
      case .reminder: return 6
      case .sourceData: return 7
      case .suggestion: return 8
      case .summary: return 9
      case .warning: return 10
      case .budget: return 11
      case .account: return 12
      case .categorization: return 13
      case .credentials: return 14
      case .invoice: return 15
      case .fraud: return 16
      case .leftToSpend: return 17
      case .transfer: return 18
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension GRPCInsightAction.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCInsightAction.TypeEnum] = [
    .unknown,
    .primary,
    .secondary,
  ]
}

extension GRPCInsightAction.Method: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCInsightAction.Method] = [
    .unknown,
    .acknowledge,
    .create,
    .add,
    .goTo,
    .edit,
    .notNow,
    .dismiss,
  ]
}

extension GRPCInsightAction.Group: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCInsightAction.Group] = [
    .unknown,
    .educating,
    .encouraging,
    .funFact,
    .productSuggest,
    .promotion,
    .reminder,
    .sourceData,
    .suggestion,
    .summary,
    .warning,
    .budget,
    .account,
    .categorization,
    .credentials,
    .invoice,
    .fraud,
    .leftToSpend,
    .transfer,
  ]
}

#endif  // swift(>=4.2)

struct GRPCRecurringTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Transaction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var transactionID: String {
      get {return _storage._transactionID}
      set {_uniqueStorage()._transactionID = newValue}
    }

    var type: GRPCRecurringTransaction.Transaction.TypeEnum {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    var date: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._date = newValue}
    }
    /// Returns true if `date` has been explicitly set.
    var hasDate: Bool {return _storage._date != nil}
    /// Clears the value of `date`. Subsequent reads from it will return its default value.
    mutating func clearDate() {_uniqueStorage()._date = nil}

    var description_p: String {
      get {return _storage._description_p}
      set {_uniqueStorage()._description_p = newValue}
    }

    var amount: GRPCCurrencyDenominatedAmount {
      get {return _storage._amount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return _storage._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {_uniqueStorage()._amount = nil}

    var category: GRPCRecurringTransaction.Category {
      get {return _storage._category ?? GRPCRecurringTransaction.Category()}
      set {_uniqueStorage()._category = newValue}
    }
    /// Returns true if `category` has been explicitly set.
    var hasCategory: Bool {return _storage._category != nil}
    /// Clears the value of `category`. Subsequent reads from it will return its default value.
    mutating func clearCategory() {_uniqueStorage()._category = nil}

    var groupID: String {
      get {return _storage._groupID}
      set {_uniqueStorage()._groupID = newValue}
    }

    var source: GRPCRecurringTransaction.Transaction.Source {
      get {return _storage._source}
      set {_uniqueStorage()._source = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TypeEnum: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case predicted // = 1
      case existing // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .predicted
        case 2: self = .existing
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .predicted: return 1
        case .existing: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum Source: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case userAdded // = 1
      case generated // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .userAdded
        case 2: self = .generated
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .userAdded: return 1
        case .generated: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Category {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: GRPCRecurringTransaction.Category.TypeEnum = .unknown

    var code: String = String()

    var primaryName: String = String()

    var secondaryName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum TypeEnum: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case income // = 1
      case expense // = 2
      case transfer // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .income
        case 2: self = .expense
        case 3: self = .transfer
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .income: return 1
        case .expense: return 2
        case .transfer: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  struct Group {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var name: String = String()

    var qualifier: String = String()

    var periodicity: GRPCRecurringTransaction.Group.RecurringPeriodicity = .unknown

    var categoryType: GRPCRecurringTransaction.Category.TypeEnum = .unknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum State: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case disabled // = 1
      case active // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .disabled
        case 2: self = .active
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .disabled: return 1
        case .active: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum RecurringPeriodicity: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unknown // = 0
      case monthly // = 1
      case quarterly // = 2
      case yearly // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .unknown
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .monthly
        case 2: self = .quarterly
        case 3: self = .yearly
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .monthly: return 1
        case .quarterly: return 2
        case .yearly: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  struct PeriodSummary {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var totalAmount: GRPCCurrencyDenominatedAmount {
      get {return _storage._totalAmount ?? GRPCCurrencyDenominatedAmount()}
      set {_uniqueStorage()._totalAmount = newValue}
    }
    /// Returns true if `totalAmount` has been explicitly set.
    var hasTotalAmount: Bool {return _storage._totalAmount != nil}
    /// Clears the value of `totalAmount`. Subsequent reads from it will return its default value.
    mutating func clearTotalAmount() {_uniqueStorage()._totalAmount = nil}

    var start: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._start = newValue}
    }
    /// Returns true if `start` has been explicitly set.
    var hasStart: Bool {return _storage._start != nil}
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
    mutating func clearStart() {_uniqueStorage()._start = nil}

    var end: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._end = newValue}
    }
    /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool {return _storage._end != nil}
    /// Clears the value of `end`. Subsequent reads from it will return its default value.
    mutating func clearEnd() {_uniqueStorage()._end = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct GRPCKycQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reference: String = String()

  var answer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCOAuth2ScopeDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GRPCMarketStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MARKET_STATUS_UNKNOWN"),
    1: .same(proto: "MARKET_STATUS_BETA"),
    2: .same(proto: "MARKET_STATUS_DISABLED"),
    3: .same(proto: "MARKET_STATUS_ENABLED"),
  ]
}

extension GRPCPeriodDateBreakType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_DATE_BREAK_TYPE_UNKNOWN"),
    1: .same(proto: "PERIOD_DATE_BREAK_TYPE_MONTHLY"),
    2: .same(proto: "PERIOD_DATE_BREAK_TYPE_MONTHLY_ADJUSTED"),
  ]
}

extension GRPCPeriodMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_MODE_UNKNOWN"),
    1: .same(proto: "PERIOD_MODE_DAILY"),
    2: .same(proto: "PERIOD_MODE_MONTHLY"),
    3: .same(proto: "PERIOD_MODE_WEEKLY"),
    4: .same(proto: "PERIOD_MODE_YEARLY"),
    5: .same(proto: "PERIOD_MODE_ALL"),
  ]
}

extension GRPCBankIdAuthenticationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BANK_ID_AUTHENTICATION_STATUS_UNKNOWN"),
    1: .same(proto: "BANK_ID_AUTHENTICATION_STATUS_AUTHENTICATED"),
    2: .same(proto: "BANK_ID_AUTHENTICATION_STATUS_AUTHENTICATION_ERROR"),
    3: .same(proto: "BANK_ID_AUTHENTICATION_STATUS_AWAITING_BANKID_AUTHENTICATION"),
    4: .same(proto: "BANK_ID_AUTHENTICATION_STATUS_NO_USER"),
  ]
}

extension GRPCAuthenticationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_STATUS_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_STATUS_AUTHENTICATED"),
    2: .same(proto: "AUTHENTICATION_STATUS_AUTHENTICATION_ERROR"),
    4: .same(proto: "AUTHENTICATION_STATUS_NO_USER"),
    5: .same(proto: "AUTHENTICATION_STATUS_USER_BLOCKED"),
    6: .same(proto: "AUTHENTICATION_STATUS_AUTHENTICATED_UNAUTHORIZED_DEVICE"),
    7: .same(proto: "AUTHENTICATION_STATUS_AUTHENTICATION_ERROR_UNAUTHORIZED_DEVICE"),
  ]
}

extension GRPCAuthenticationKeyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_TYPE_UNKNOWN"),
    1: .same(proto: "KEY_TYPE_RSA"),
    2: .same(proto: "KEY_TYPE_ECDSA"),
  ]
}

extension GRPCAuthenticationSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_SOURCE_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_SOURCE_TOUCHID"),
    2: .same(proto: "AUTHENTICATION_SOURCE_FINGERPRINT"),
    3: .same(proto: "AUTHENTICATION_SOURCE_FACEID"),
  ]
}

extension GRPCIdentityAnswerKey: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDENTITY_ANSWER_KEY_UNKNOWN"),
    1: .same(proto: "IDENTITY_ANSWER_KEY_OK"),
    2: .same(proto: "IDENTITY_ANSWER_KEY_FRAUDULENT"),
  ]
}

extension GRPCConsentAction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONSENT_ACTION_UNKNOWN"),
    1: .same(proto: "CONSENT_ACTION_ACCEPTED"),
    2: .same(proto: "CONSENT_ACTION_DECLINED"),
  ]
}

extension GRPCSmsOtpStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SMS_OTP_STATUS_UNKNOWN"),
    1: .same(proto: "SMS_OTP_STATUS_CORRECT"),
    2: .same(proto: "SMS_OTP_STATUS_INCORRECT"),
    3: .same(proto: "SMS_OTP_STATUS_EXPIRED"),
    4: .same(proto: "SMS_OTP_STATUS_TOO_MANY_ATTEMPTS"),
  ]
}

extension GRPCRateAppStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RATE_APP_STATUS_UNKNOWN"),
    1: .same(proto: "RATE_APP_STATUS_CLICKED_IGNORE"),
    2: .same(proto: "RATE_APP_STATUS_CLICKED_RATE_IN_STORE"),
  ]
}

extension GRPCAuthenticationMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_METHOD_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_METHOD_BANKID"),
    2: .same(proto: "AUTHENTICATION_METHOD_EMAIL_AND_PASSWORD"),
    3: .same(proto: "AUTHENTICATION_METHOD_SMS_OTP_AND_PIN6"),
    4: .same(proto: "AUTHENTICATION_METHOD_PHONE_NUMBER_AND_PIN6"),
    5: .same(proto: "AUTHENTICATION_METHOD_ABN_AMRO_PIN5"),
  ]
}

extension GRPCSortType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SORT_TYPE_UNKNOWN"),
    1: .same(proto: "SORT_TYPE_SCORE"),
    2: .same(proto: "SORT_TYPE_DATE"),
    3: .same(proto: "SORT_TYPE_ACCOUNT"),
    4: .same(proto: "SORT_TYPE_DESCRIPTION"),
    5: .same(proto: "SORT_TYPE_AMOUNT"),
    6: .same(proto: "SORT_TYPE_CATEGORY"),
  ]
}

extension GRPCOrderType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDER_TYPE_UNKNOWN"),
    1: .same(proto: "ORDER_TYPE_ASC"),
    2: .same(proto: "ORDER_TYPE_DESC"),
  ]
}

extension GRPCTheme: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "THEME_UNKNOWN"),
    1: .same(proto: "THEME_LIGHT"),
    2: .same(proto: "THEME_BLACK"),
    3: .same(proto: "THEME_DARK"),
  ]
}

extension GRPCCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Credential"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "provider_name"),
    3: .same(proto: "type"),
    4: .same(proto: "status"),
    5: .standard(proto: "status_payload"),
    6: .standard(proto: "status_updated"),
    7: .same(proto: "updated"),
    8: .same(proto: "fields"),
    9: .standard(proto: "supplemental_information_fields"),
    10: .standard(proto: "third_party_app_authentication"),
    11: .same(proto: "sessionExpiryDate"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _providerName: String = String()
    var _type: GRPCCredential.TypeEnum = .unknown
    var _status: GRPCCredential.Status = .unknown
    var _statusPayload: String = String()
    var _statusUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _fields: Dictionary<String,String> = [:]
    var _supplementalInformationFields: [GRPCProviderFieldSpecification] = []
    var _thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication? = nil
    var _sessionExpiryDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _providerName = source._providerName
      _type = source._type
      _status = source._status
      _statusPayload = source._statusPayload
      _statusUpdated = source._statusUpdated
      _updated = source._updated
      _fields = source._fields
      _supplementalInformationFields = source._supplementalInformationFields
      _thirdPartyAppAuthentication = source._thirdPartyAppAuthentication
      _sessionExpiryDate = source._sessionExpiryDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._providerName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 5: try decoder.decodeSingularStringField(value: &_storage._statusPayload)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._statusUpdated)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._updated)
        case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._fields)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._supplementalInformationFields)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._thirdPartyAppAuthentication)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._sessionExpiryDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._providerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._providerName, fieldNumber: 2)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      if !_storage._statusPayload.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusPayload, fieldNumber: 5)
      }
      if let v = _storage._statusUpdated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._updated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._fields, fieldNumber: 8)
      }
      if !_storage._supplementalInformationFields.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._supplementalInformationFields, fieldNumber: 9)
      }
      if let v = _storage._thirdPartyAppAuthentication {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._sessionExpiryDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCredential, rhs: GRPCCredential) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._providerName != rhs_storage._providerName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._statusPayload != rhs_storage._statusPayload {return false}
        if _storage._statusUpdated != rhs_storage._statusUpdated {return false}
        if _storage._updated != rhs_storage._updated {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._supplementalInformationFields != rhs_storage._supplementalInformationFields {return false}
        if _storage._thirdPartyAppAuthentication != rhs_storage._thirdPartyAppAuthentication {return false}
        if _storage._sessionExpiryDate != rhs_storage._sessionExpiryDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCredential.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_CREATED"),
    2: .same(proto: "STATUS_AUTHENTICATING"),
    3: .same(proto: "STATUS_UPDATING"),
    4: .same(proto: "STATUS_UPDATED"),
    5: .same(proto: "STATUS_TEMPORARY_ERROR"),
    6: .same(proto: "STATUS_AUTHENTICATION_ERROR"),
    7: .same(proto: "STATUS_PERMANENT_ERROR"),
    8: .same(proto: "STATUS_AWAITING_MOBILE_BANKID_AUTHENTICATION"),
    9: .same(proto: "STATUS_AWAITING_SUPPLEMENTAL_INFORMATION"),
    10: .same(proto: "STATUS_DISABLED"),
    11: .same(proto: "STATUS_AWAITING_THIRD_PARTY_APP_AUTHENTICATION"),
    12: .same(proto: "STATUS_SESSION_EXPIRED"),
  ]
}

extension GRPCCredential.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_PASSWORD"),
    2: .same(proto: "TYPE_MOBILE_BANKID"),
    3: .same(proto: "TYPE_KEYFOB"),
    4: .same(proto: "TYPE_FRAUD"),
    5: .same(proto: "TYPE_THIRD_PARTY_AUTHENTICATION"),
  ]
}

extension GRPCAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "balance"),
    3: .standard(proto: "account_number"),
    4: .standard(proto: "credential_id"),
    5: .same(proto: "excluded"),
    6: .same(proto: "favored"),
    7: .same(proto: "transactional"),
    8: .same(proto: "name"),
    9: .same(proto: "ownership"),
    10: .same(proto: "type"),
    11: .same(proto: "images"),
    12: .same(proto: "closed"),
    13: .same(proto: "identifiers"),
    14: .same(proto: "exclusionType"),
    15: .same(proto: "flags"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _balance: GRPCCurrencyDenominatedAmount? = nil
    var _accountNumber: String = String()
    var _credentialID: String = String()
    var _excluded: Bool = false
    var _favored: Bool = false
    var _transactional: Bool = false
    var _name: String = String()
    var _ownership: GRPCExactNumber? = nil
    var _type: GRPCAccount.TypeEnum = .unknown
    var _images: GRPCImages? = nil
    var _closed: Bool = false
    var _identifiers: [String] = []
    var _exclusionType: GRPCAccount.Exclusion = .unkown
    var _flags: [GRPCAccount.AccountFlag] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _balance = source._balance
      _accountNumber = source._accountNumber
      _credentialID = source._credentialID
      _excluded = source._excluded
      _favored = source._favored
      _transactional = source._transactional
      _name = source._name
      _ownership = source._ownership
      _type = source._type
      _images = source._images
      _closed = source._closed
      _identifiers = source._identifiers
      _exclusionType = source._exclusionType
      _flags = source._flags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 3: try decoder.decodeSingularStringField(value: &_storage._accountNumber)
        case 4: try decoder.decodeSingularStringField(value: &_storage._credentialID)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._excluded)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._favored)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._transactional)
        case 8: try decoder.decodeSingularStringField(value: &_storage._name)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._ownership)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._closed)
        case 13: try decoder.decodeRepeatedStringField(value: &_storage._identifiers)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._exclusionType)
        case 15: try decoder.decodeRepeatedEnumField(value: &_storage._flags)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._accountNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountNumber, fieldNumber: 3)
      }
      if !_storage._credentialID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._credentialID, fieldNumber: 4)
      }
      if _storage._excluded != false {
        try visitor.visitSingularBoolField(value: _storage._excluded, fieldNumber: 5)
      }
      if _storage._favored != false {
        try visitor.visitSingularBoolField(value: _storage._favored, fieldNumber: 6)
      }
      if _storage._transactional != false {
        try visitor.visitSingularBoolField(value: _storage._transactional, fieldNumber: 7)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 8)
      }
      if let v = _storage._ownership {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 10)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._closed != false {
        try visitor.visitSingularBoolField(value: _storage._closed, fieldNumber: 12)
      }
      if !_storage._identifiers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._identifiers, fieldNumber: 13)
      }
      if _storage._exclusionType != .unkown {
        try visitor.visitSingularEnumField(value: _storage._exclusionType, fieldNumber: 14)
      }
      if !_storage._flags.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._flags, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCAccount, rhs: GRPCAccount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._accountNumber != rhs_storage._accountNumber {return false}
        if _storage._credentialID != rhs_storage._credentialID {return false}
        if _storage._excluded != rhs_storage._excluded {return false}
        if _storage._favored != rhs_storage._favored {return false}
        if _storage._transactional != rhs_storage._transactional {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._ownership != rhs_storage._ownership {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._closed != rhs_storage._closed {return false}
        if _storage._identifiers != rhs_storage._identifiers {return false}
        if _storage._exclusionType != rhs_storage._exclusionType {return false}
        if _storage._flags != rhs_storage._flags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCAccount.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_CHECKING"),
    2: .same(proto: "TYPE_SAVINGS"),
    3: .same(proto: "TYPE_INVESTMENT"),
    4: .same(proto: "TYPE_MORTGAGE"),
    5: .same(proto: "TYPE_CREDIT_CARD"),
    6: .same(proto: "TYPE_LOAN"),
    7: .same(proto: "TYPE_DUMMY"),
    8: .same(proto: "TYPE_PENSION"),
    9: .same(proto: "TYPE_OTHER"),
    10: .same(proto: "TYPE_EXTERNAL"),
  ]
}

extension GRPCAccount.Exclusion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKOWN"),
    1: .same(proto: "PFM_AND_SEARCH"),
    2: .same(proto: "PFM_DATA"),
    3: .same(proto: "NONE"),
    4: .same(proto: "AGGREGATION"),
  ]
}

extension GRPCAccount.AccountFlag: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "BUSINESS"),
    2: .same(proto: "MANDATE"),
  ]
}

extension GRPCTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Tag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTag, rhs: GRPCTag) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "amount"),
    3: .standard(proto: "category_code"),
    4: .standard(proto: "original_amount"),
    5: .same(proto: "date"),
    6: .same(proto: "description"),
    7: .same(proto: "id"),
    8: .same(proto: "notes"),
    15: .same(proto: "tags"),
    9: .standard(proto: "original_date"),
    10: .standard(proto: "original_description"),
    11: .same(proto: "details"),
    12: .same(proto: "pending"),
    13: .same(proto: "upcoming"),
    14: .same(proto: "type"),
    16: .standard(proto: "secondary_description"),
    17: .same(proto: "inserted"),
    18: .same(proto: "parts"),
    19: .standard(proto: "dispensable_amount"),
  ]

  fileprivate class _StorageClass {
    var _accountID: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _categoryCode: String = String()
    var _originalAmount: GRPCCurrencyDenominatedAmount? = nil
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _id: String = String()
    var _notes: String = String()
    var _tags: [GRPCTag] = []
    var _originalDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _originalDescription: String = String()
    var _details: GRPCTransaction.TransactionDetails? = nil
    var _pending: Bool = false
    var _upcoming: Bool = false
    var _type: GRPCTransaction.TypeEnum = .unknown
    var _secondaryDescription: String = String()
    var _inserted: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _parts: [GRPCTransaction.Part] = []
    var _dispensableAmount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _amount = source._amount
      _categoryCode = source._categoryCode
      _originalAmount = source._originalAmount
      _date = source._date
      _description_p = source._description_p
      _id = source._id
      _notes = source._notes
      _tags = source._tags
      _originalDate = source._originalDate
      _originalDescription = source._originalDescription
      _details = source._details
      _pending = source._pending
      _upcoming = source._upcoming
      _type = source._type
      _secondaryDescription = source._secondaryDescription
      _inserted = source._inserted
      _parts = source._parts
      _dispensableAmount = source._dispensableAmount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._accountID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 3: try decoder.decodeSingularStringField(value: &_storage._categoryCode)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._originalAmount)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 7: try decoder.decodeSingularStringField(value: &_storage._id)
        case 8: try decoder.decodeSingularStringField(value: &_storage._notes)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._originalDate)
        case 10: try decoder.decodeSingularStringField(value: &_storage._originalDescription)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._details)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._pending)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._upcoming)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._tags)
        case 16: try decoder.decodeSingularStringField(value: &_storage._secondaryDescription)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._inserted)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._parts)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._dispensableAmount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._accountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountID, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._categoryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._categoryCode, fieldNumber: 3)
      }
      if let v = _storage._originalAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 7)
      }
      if !_storage._notes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._notes, fieldNumber: 8)
      }
      if let v = _storage._originalDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._originalDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._originalDescription, fieldNumber: 10)
      }
      if let v = _storage._details {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._pending != false {
        try visitor.visitSingularBoolField(value: _storage._pending, fieldNumber: 12)
      }
      if _storage._upcoming != false {
        try visitor.visitSingularBoolField(value: _storage._upcoming, fieldNumber: 13)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 14)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 15)
      }
      if !_storage._secondaryDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._secondaryDescription, fieldNumber: 16)
      }
      if let v = _storage._inserted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._parts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parts, fieldNumber: 18)
      }
      if let v = _storage._dispensableAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransaction, rhs: GRPCTransaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._categoryCode != rhs_storage._categoryCode {return false}
        if _storage._originalAmount != rhs_storage._originalAmount {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._notes != rhs_storage._notes {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._originalDate != rhs_storage._originalDate {return false}
        if _storage._originalDescription != rhs_storage._originalDescription {return false}
        if _storage._details != rhs_storage._details {return false}
        if _storage._pending != rhs_storage._pending {return false}
        if _storage._upcoming != rhs_storage._upcoming {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._secondaryDescription != rhs_storage._secondaryDescription {return false}
        if _storage._inserted != rhs_storage._inserted {return false}
        if _storage._parts != rhs_storage._parts {return false}
        if _storage._dispensableAmount != rhs_storage._dispensableAmount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransaction.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_DEFAULT"),
    2: .same(proto: "TYPE_CREDIT_CARD"),
    3: .same(proto: "TYPE_PAYMENT"),
    4: .same(proto: "TYPE_TRANSFER"),
    5: .same(proto: "TYPE_WITHDRAWAL"),
  ]
}

extension GRPCTransaction.TransactionDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCTransaction.protoMessageName + ".TransactionDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.transferID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transferID.isEmpty {
      try visitor.visitSingularStringField(value: self.transferID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransaction.TransactionDetails, rhs: GRPCTransaction.TransactionDetails) -> Bool {
    if lhs.transferID != rhs.transferID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransaction.Part: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCTransaction.protoMessageName + ".Part"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "amount"),
    3: .standard(proto: "category_code"),
    4: .same(proto: "counterpart"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _categoryCode: String = String()
    var _counterpart: GRPCTransaction.Counterpart? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _amount = source._amount
      _categoryCode = source._categoryCode
      _counterpart = source._counterpart
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 3: try decoder.decodeSingularStringField(value: &_storage._categoryCode)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._counterpart)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._categoryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._categoryCode, fieldNumber: 3)
      }
      if let v = _storage._counterpart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransaction.Part, rhs: GRPCTransaction.Part) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._categoryCode != rhs_storage._categoryCode {return false}
        if _storage._counterpart != rhs_storage._counterpart {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransaction.Counterpart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCTransaction.protoMessageName + ".Counterpart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "transaction_id"),
    3: .standard(proto: "transaction_amount"),
    4: .standard(proto: "transaction_description"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _transactionID: String = String()
    var _transactionAmount: GRPCCurrencyDenominatedAmount? = nil
    var _transactionDescription: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _transactionID = source._transactionID
      _transactionAmount = source._transactionAmount
      _transactionDescription = source._transactionDescription
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._transactionID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._transactionAmount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._transactionDescription)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._transactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionID, fieldNumber: 2)
      }
      if let v = _storage._transactionAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._transactionDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionDescription, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransaction.Counterpart, rhs: GRPCTransaction.Counterpart) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._transactionID != rhs_storage._transactionID {return false}
        if _storage._transactionAmount != rhs_storage._transactionAmount {return false}
        if _storage._transactionDescription != rhs_storage._transactionDescription {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Provider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "type"),
    4: .same(proto: "status"),
    5: .standard(proto: "credential_type"),
    6: .standard(proto: "help_text"),
    7: .same(proto: "popular"),
    8: .same(proto: "fields"),
    9: .standard(proto: "group_display_name"),
    10: .same(proto: "images"),
    11: .standard(proto: "display_description"),
    12: .same(proto: "capabilities"),
    13: .standard(proto: "market_code"),
    14: .standard(proto: "access_type"),
    17: .standard(proto: "financial_institution_id"),
    18: .standard(proto: "financial_institution_name"),
    19: .standard(proto: "authentication_flow"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _type: GRPCProvider.TypeEnum = .unknown
    var _status: GRPCProvider.Status = .unknown
    var _credentialType: GRPCCredential.TypeEnum = .unknown
    var _helpText: String = String()
    var _popular: Bool = false
    var _fields: [GRPCProviderFieldSpecification] = []
    var _groupDisplayName: String = String()
    var _images: GRPCImages? = nil
    var _displayDescription: String = String()
    var _capabilities: [GRPCProvider.Capability] = []
    var _marketCode: String = String()
    var _accessType: GRPCProvider.AccessType = .unknown
    var _financialInstitutionID: String = String()
    var _financialInstitutionName: String = String()
    var _authenticationFlow: GRPCProvider.AuthenticationFlow = .unknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _type = source._type
      _status = source._status
      _credentialType = source._credentialType
      _helpText = source._helpText
      _popular = source._popular
      _fields = source._fields
      _groupDisplayName = source._groupDisplayName
      _images = source._images
      _displayDescription = source._displayDescription
      _capabilities = source._capabilities
      _marketCode = source._marketCode
      _accessType = source._accessType
      _financialInstitutionID = source._financialInstitutionID
      _financialInstitutionName = source._financialInstitutionName
      _authenticationFlow = source._authenticationFlow
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._credentialType)
        case 6: try decoder.decodeSingularStringField(value: &_storage._helpText)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._popular)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._fields)
        case 9: try decoder.decodeSingularStringField(value: &_storage._groupDisplayName)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 11: try decoder.decodeSingularStringField(value: &_storage._displayDescription)
        case 12: try decoder.decodeRepeatedEnumField(value: &_storage._capabilities)
        case 13: try decoder.decodeSingularStringField(value: &_storage._marketCode)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._accessType)
        case 17: try decoder.decodeSingularStringField(value: &_storage._financialInstitutionID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._financialInstitutionName)
        case 19: try decoder.decodeSingularEnumField(value: &_storage._authenticationFlow)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      if _storage._credentialType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._credentialType, fieldNumber: 5)
      }
      if !_storage._helpText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._helpText, fieldNumber: 6)
      }
      if _storage._popular != false {
        try visitor.visitSingularBoolField(value: _storage._popular, fieldNumber: 7)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fields, fieldNumber: 8)
      }
      if !_storage._groupDisplayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupDisplayName, fieldNumber: 9)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._displayDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayDescription, fieldNumber: 11)
      }
      if !_storage._capabilities.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._capabilities, fieldNumber: 12)
      }
      if !_storage._marketCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._marketCode, fieldNumber: 13)
      }
      if _storage._accessType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._accessType, fieldNumber: 14)
      }
      if !_storage._financialInstitutionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._financialInstitutionID, fieldNumber: 17)
      }
      if !_storage._financialInstitutionName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._financialInstitutionName, fieldNumber: 18)
      }
      if _storage._authenticationFlow != .unknown {
        try visitor.visitSingularEnumField(value: _storage._authenticationFlow, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProvider, rhs: GRPCProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._credentialType != rhs_storage._credentialType {return false}
        if _storage._helpText != rhs_storage._helpText {return false}
        if _storage._popular != rhs_storage._popular {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._groupDisplayName != rhs_storage._groupDisplayName {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._displayDescription != rhs_storage._displayDescription {return false}
        if _storage._capabilities != rhs_storage._capabilities {return false}
        if _storage._marketCode != rhs_storage._marketCode {return false}
        if _storage._accessType != rhs_storage._accessType {return false}
        if _storage._financialInstitutionID != rhs_storage._financialInstitutionID {return false}
        if _storage._financialInstitutionName != rhs_storage._financialInstitutionName {return false}
        if _storage._authenticationFlow != rhs_storage._authenticationFlow {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProvider.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_BANK"),
    2: .same(proto: "TYPE_CREDIT_CARD"),
    3: .same(proto: "TYPE_BROKER"),
    4: .same(proto: "TYPE_OTHER"),
    5: .same(proto: "TYPE_TEST"),
    6: .same(proto: "TYPE_FRAUD"),
  ]
}

extension GRPCProvider.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_ENABLED"),
    2: .same(proto: "STATUS_DISABLED"),
    3: .same(proto: "STATUS_TEMPORARY_DISABLED"),
    4: .same(proto: "STATUS_OBSOLETE"),
  ]
}

extension GRPCProvider.Capability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAPABILITY_UNKNOWN"),
    1: .same(proto: "CAPABILITY_TRANSFERS"),
    2: .same(proto: "CAPABILITY_MORTGAGE_AGGREGATION"),
    3: .same(proto: "CAPABILITY_CHECKING_ACCOUNTS"),
    4: .same(proto: "CAPABILITY_SAVINGS_ACCOUNTS"),
    5: .same(proto: "CAPABILITY_CREDIT_CARDS"),
    6: .same(proto: "CAPABILITY_INVESTMENTS"),
    7: .same(proto: "CAPABILITY_LOANS"),
    8: .same(proto: "CAPABILITY_PAYMENTS"),
    9: .same(proto: "CAPABILITY_MORTGAGE_LOAN"),
    10: .same(proto: "CAPABILITY_IDENTITY_DATA"),
  ]
}

extension GRPCProvider.AccessType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCESS_TYPE_UNKNOWN"),
    1: .same(proto: "ACCESS_TYPE_OPEN_BANKING"),
    2: .same(proto: "ACCESS_TYPE_OTHER"),
  ]
}

extension GRPCProvider.AuthenticationFlow: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_FLOW_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_FLOW_EMBEDDED"),
    2: .same(proto: "AUTHENTICATION_FLOW_REDIRECT"),
    3: .same(proto: "AUTHENTICATION_FLOW_DECOUPLED"),
  ]
}

extension GRPCCurrencyDenominatedAmount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CurrencyDenominatedAmount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "currency_code"),
  ]

  fileprivate class _StorageClass {
    var _value: GRPCExactNumber? = nil
    var _currencyCode: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _currencyCode = source._currencyCode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
        case 2: try decoder.decodeSingularStringField(value: &_storage._currencyCode)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._currencyCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currencyCode, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCurrencyDenominatedAmount, rhs: GRPCCurrencyDenominatedAmount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        if _storage._currencyCode != rhs_storage._currencyCode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCExactNumber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ExactNumber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unscaledValue"),
    2: .same(proto: "scale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.unscaledValue)
      case 2: try decoder.decodeSingularInt64Field(value: &self.scale)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unscaledValue != 0 {
      try visitor.visitSingularInt64Field(value: self.unscaledValue, fieldNumber: 1)
    }
    if self.scale != 0 {
      try visitor.visitSingularInt64Field(value: self.scale, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCExactNumber, rhs: GRPCExactNumber) -> Bool {
    if lhs.unscaledValue != rhs.unscaledValue {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Period"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "week"),
    4: .same(proto: "day"),
    5: .same(proto: "start"),
    6: .same(proto: "stop"),
  ]

  fileprivate class _StorageClass {
    var _year: UInt32 = 0
    var _month: UInt32 = 0
    var _week: UInt32 = 0
    var _day: UInt32 = 0
    var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _stop: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _year = source._year
      _month = source._month
      _week = source._week
      _day = source._day
      _start = source._start
      _stop = source._stop
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._year)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._month)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._week)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._day)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._stop)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._year != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._year, fieldNumber: 1)
      }
      if _storage._month != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._month, fieldNumber: 2)
      }
      if _storage._week != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._week, fieldNumber: 3)
      }
      if _storage._day != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._day, fieldNumber: 4)
      }
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._stop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPeriod, rhs: GRPCPeriod) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._year != rhs_storage._year {return false}
        if _storage._month != rhs_storage._month {return false}
        if _storage._week != rhs_storage._week {return false}
        if _storage._day != rhs_storage._day {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._stop != rhs_storage._stop {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPeriodDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PeriodDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "week"),
    4: .same(proto: "day"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.year)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.month)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.week)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.day)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if self.week != 0 {
      try visitor.visitSingularUInt32Field(value: self.week, fieldNumber: 3)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPeriodDescription, rhs: GRPCPeriodDescription) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.week != rhs.week {return false}
    if lhs.day != rhs.day {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCStatisticTree: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StatisticTree"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "balances_by_account_id"),
    2: .standard(proto: "balances_by_account_group_type"),
    3: .standard(proto: "left_to_spend"),
    5: .standard(proto: "expenses_by_category_code"),
    6: .standard(proto: "income_by_category_code"),
    7: .standard(proto: "loan_rates_by_property"),
    8: .standard(proto: "loan_balances_by_property"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.balancesByAccountID)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.balancesByAccountGroupType)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.leftToSpend)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.expensesByCategoryCode)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.incomeByCategoryCode)
      case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.loanRatesByProperty)
      case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &self.loanBalancesByProperty)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.balancesByAccountID.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.balancesByAccountID, fieldNumber: 1)
    }
    if !self.balancesByAccountGroupType.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.balancesByAccountGroupType, fieldNumber: 2)
    }
    if !self.leftToSpend.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.leftToSpend, fieldNumber: 3)
    }
    if !self.expensesByCategoryCode.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.expensesByCategoryCode, fieldNumber: 5)
    }
    if !self.incomeByCategoryCode.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.incomeByCategoryCode, fieldNumber: 6)
    }
    if !self.loanRatesByProperty.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.loanRatesByProperty, fieldNumber: 7)
    }
    if !self.loanBalancesByProperty.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: self.loanBalancesByProperty, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCStatisticTree, rhs: GRPCStatisticTree) -> Bool {
    if lhs.balancesByAccountID != rhs.balancesByAccountID {return false}
    if lhs.balancesByAccountGroupType != rhs.balancesByAccountGroupType {return false}
    if lhs.leftToSpend != rhs.leftToSpend {return false}
    if lhs.expensesByCategoryCode != rhs.expensesByCategoryCode {return false}
    if lhs.incomeByCategoryCode != rhs.incomeByCategoryCode {return false}
    if lhs.loanRatesByProperty != rhs.loanRatesByProperty {return false}
    if lhs.loanBalancesByProperty != rhs.loanBalancesByProperty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCStatisticTree.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_BALANCES_BY_ACCOUNT_ID"),
    2: .same(proto: "TYPE_BALANCES_BY_ACCOUNT_GROUP_TYPE"),
    3: .same(proto: "TYPE_LEFT_TO_SPEND"),
    4: .same(proto: "TYPE_EXPENCES_BY_CATEGORY_CODE"),
    5: .same(proto: "TYPE_INCOME_BY_CATEGORY_CODE"),
  ]
}

extension GRPCStatisticNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StatisticNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "period"),
    2: .same(proto: "amount"),
    4: .same(proto: "value"),
    3: .same(proto: "children"),
  ]

  fileprivate class _StorageClass {
    var _period: GRPCPeriod? = nil
    var _nodeValue: GRPCStatisticNode.OneOf_NodeValue?
    var _children: Dictionary<String,GRPCStatisticNode> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _period = source._period
      _nodeValue = source._nodeValue
      _children = source._children
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._period)
        case 2:
          var v: GRPCCurrencyDenominatedAmount?
          if let current = _storage._nodeValue {
            try decoder.handleConflictingOneOf()
            if case .amount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nodeValue = .amount(v)}
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: &_storage._children)
        case 4:
          var v: GRPCExactNumber?
          if let current = _storage._nodeValue {
            try decoder.handleConflictingOneOf()
            if case .value(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._nodeValue = .value(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if case .amount(let v)? = _storage._nodeValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._children.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCStatisticNode>.self, value: _storage._children, fieldNumber: 3)
      }
      if case .value(let v)? = _storage._nodeValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCStatisticNode, rhs: GRPCStatisticNode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._period != rhs_storage._period {return false}
        if _storage._nodeValue != rhs_storage._nodeValue {return false}
        if _storage._children != rhs_storage._children {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFollowItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FollowItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expenses_criteria"),
    2: .standard(proto: "search_criteria"),
    3: .standard(proto: "saving_criteria"),
    4: .same(proto: "data"),
    5: .same(proto: "id"),
    6: .same(proto: "name"),
    7: .standard(proto: "created_date"),
  ]

  fileprivate class _StorageClass {
    var _criteria: GRPCFollowItem.OneOf_Criteria?
    var _data: GRPCFollowData? = nil
    var _id: String = String()
    var _name: String = String()
    var _createdDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _criteria = source._criteria
      _data = source._data
      _id = source._id
      _name = source._name
      _createdDate = source._createdDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: GRPCExpensesFollowCriteria?
          if let current = _storage._criteria {
            try decoder.handleConflictingOneOf()
            if case .expensesCriteria(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._criteria = .expensesCriteria(v)}
        case 2:
          var v: GRPCSearchFollowCriteria?
          if let current = _storage._criteria {
            try decoder.handleConflictingOneOf()
            if case .searchCriteria(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._criteria = .searchCriteria(v)}
        case 3:
          var v: GRPCSavingsFollowCriteria?
          if let current = _storage._criteria {
            try decoder.handleConflictingOneOf()
            if case .savingCriteria(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._criteria = .savingCriteria(v)}
        case 4: try decoder.decodeSingularMessageField(value: &_storage._data)
        case 5: try decoder.decodeSingularStringField(value: &_storage._id)
        case 6: try decoder.decodeSingularStringField(value: &_storage._name)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._createdDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._criteria {
      case .expensesCriteria(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .searchCriteria(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .savingCriteria(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
      if let v = _storage._data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 5)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFollowItem, rhs: GRPCFollowItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._criteria != rhs_storage._criteria {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFollowItemHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FollowItemHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "historical_amounts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.historicalAmounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.historicalAmounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.historicalAmounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFollowItemHistory, rhs: GRPCFollowItemHistory) -> Bool {
    if lhs.historicalAmounts != rhs.historicalAmounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCExpensesFollowCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ExpensesFollowCriteria"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_amount"),
    2: .standard(proto: "category_codes"),
  ]

  fileprivate class _StorageClass {
    var _targetAmount: GRPCExactNumber? = nil
    var _categoryCodes: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetAmount = source._targetAmount
      _categoryCodes = source._categoryCodes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetAmount)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._categoryCodes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._categoryCodes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._categoryCodes, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCExpensesFollowCriteria, rhs: GRPCExpensesFollowCriteria) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetAmount != rhs_storage._targetAmount {return false}
        if _storage._categoryCodes != rhs_storage._categoryCodes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCSearchFollowCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SearchFollowCriteria"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_amount"),
    2: .same(proto: "query"),
  ]

  fileprivate class _StorageClass {
    var _targetAmount: GRPCExactNumber? = nil
    var _query: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetAmount = source._targetAmount
      _query = source._query
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetAmount)
        case 2: try decoder.decodeSingularStringField(value: &_storage._query)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._query.isEmpty {
        try visitor.visitSingularStringField(value: _storage._query, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCSearchFollowCriteria, rhs: GRPCSearchFollowCriteria) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetAmount != rhs_storage._targetAmount {return false}
        if _storage._query != rhs_storage._query {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCSavingsFollowCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SavingsFollowCriteria"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_amount"),
    2: .standard(proto: "account_ids"),
    3: .same(proto: "period"),
  ]

  fileprivate class _StorageClass {
    var _targetAmount: GRPCExactNumber? = nil
    var _accountIds: [String] = []
    var _period: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetAmount = source._targetAmount
      _accountIds = source._accountIds
      _period = source._period
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetAmount)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._accountIds)
        case 3: try decoder.decodeSingularStringField(value: &_storage._period)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._accountIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._accountIds, fieldNumber: 2)
      }
      if !_storage._period.isEmpty {
        try visitor.visitSingularStringField(value: _storage._period, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCSavingsFollowCriteria, rhs: GRPCSavingsFollowCriteria) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetAmount != rhs_storage._targetAmount {return false}
        if _storage._accountIds != rhs_storage._accountIds {return false}
        if _storage._period != rhs_storage._period {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFollowData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FollowData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "historical_amounts"),
    2: .same(proto: "period"),
  ]

  fileprivate class _StorageClass {
    var _historicalAmounts: [GRPCPeriodExactNumberPair] = []
    var _period: GRPCPeriod? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _historicalAmounts = source._historicalAmounts
      _period = source._period
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._historicalAmounts)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._period)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._historicalAmounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._historicalAmounts, fieldNumber: 1)
      }
      if let v = _storage._period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFollowData, rhs: GRPCFollowData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._historicalAmounts != rhs_storage._historicalAmounts {return false}
        if _storage._period != rhs_storage._period {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPeriodExactNumberPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PeriodExactNumberPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "period"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _period: GRPCPeriod? = nil
    var _value: GRPCExactNumber? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _period = source._period
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._period)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._period {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPeriodExactNumberPair, rhs: GRPCPeriodExactNumberPair) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._period != rhs_storage._period {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Budget"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget, rhs: GRPCBudget) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Specification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".Specification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "amount"),
    5: .standard(proto: "recurring_periodicity"),
    6: .standard(proto: "one_off_periodicity"),
    7: .same(proto: "archived"),
    8: .same(proto: "filter"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _name: String = String()
    var _description_p: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _periodicity: GRPCBudget.Specification.OneOf_Periodicity?
    var _archived: Bool = false
    var _filter: GRPCBudget.Filter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _description_p = source._description_p
      _amount = source._amount
      _periodicity = source._periodicity
      _archived = source._archived
      _filter = source._filter
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 5:
          var v: GRPCBudget.RecurringPeriodicity?
          if let current = _storage._periodicity {
            try decoder.handleConflictingOneOf()
            if case .recurringPeriodicity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._periodicity = .recurringPeriodicity(v)}
        case 6:
          var v: GRPCBudget.OneOffPeriodicity?
          if let current = _storage._periodicity {
            try decoder.handleConflictingOneOf()
            if case .oneOffPeriodicity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._periodicity = .oneOffPeriodicity(v)}
        case 7: try decoder.decodeSingularBoolField(value: &_storage._archived)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._filter)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      switch _storage._periodicity {
      case .recurringPeriodicity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .oneOffPeriodicity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
      if _storage._archived != false {
        try visitor.visitSingularBoolField(value: _storage._archived, fieldNumber: 7)
      }
      if let v = _storage._filter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Specification, rhs: GRPCBudget.Specification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._periodicity != rhs_storage._periodicity {return false}
        if _storage._archived != rhs_storage._archived {return false}
        if _storage._filter != rhs_storage._filter {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Filter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".Filter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accounts"),
    2: .same(proto: "categories"),
    3: .same(proto: "tags"),
    4: .standard(proto: "free_text_query"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.accounts)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.categories)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 4: try decoder.decodeSingularStringField(value: &self.freeTextQuery)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accounts, fieldNumber: 1)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.categories, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 3)
    }
    if !self.freeTextQuery.isEmpty {
      try visitor.visitSingularStringField(value: self.freeTextQuery, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Filter, rhs: GRPCBudget.Filter) -> Bool {
    if lhs.accounts != rhs.accounts {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.freeTextQuery != rhs.freeTextQuery {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Filter.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.Filter.protoMessageName + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Filter.Account, rhs: GRPCBudget.Filter.Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Filter.Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.Filter.protoMessageName + ".Category"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Filter.Category, rhs: GRPCBudget.Filter.Category) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Filter.Tag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.Filter.protoMessageName + ".Tag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Filter.Tag, rhs: GRPCBudget.Filter.Tag) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.OneOffPeriodicity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".OneOffPeriodicity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  fileprivate class _StorageClass {
    var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._end)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.OneOffPeriodicity, rhs: GRPCBudget.OneOffPeriodicity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.RecurringPeriodicity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".RecurringPeriodicity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "period_unit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.periodUnit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.periodUnit != .unknown {
      try visitor.visitSingularEnumField(value: self.periodUnit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.RecurringPeriodicity, rhs: GRPCBudget.RecurringPeriodicity) -> Bool {
    if lhs.periodUnit != rhs.periodUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.RecurringPeriodicity.PeriodUnit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_UNIT_UNKNOWN"),
    1: .same(proto: "PERIOD_UNIT_WEEK"),
    2: .same(proto: "PERIOD_UNIT_MONTH"),
    3: .same(proto: "PERIOD_UNIT_YEAR"),
  ]
}

extension GRPCBudget.Period: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".Period"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
    3: .standard(proto: "spent_amount"),
    4: .standard(proto: "budget_amount"),
  ]

  fileprivate class _StorageClass {
    var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _spentAmount: GRPCCurrencyDenominatedAmount? = nil
    var _budgetAmount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
      _spentAmount = source._spentAmount
      _budgetAmount = source._budgetAmount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._end)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._spentAmount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._budgetAmount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._spentAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._budgetAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Period, rhs: GRPCBudget.Period) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._spentAmount != rhs_storage._spentAmount {return false}
        if _storage._budgetAmount != rhs_storage._budgetAmount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".Summary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "budget_specification"),
    2: .standard(proto: "current_budget_period"),
  ]

  fileprivate class _StorageClass {
    var _budgetSpecification: GRPCBudget.Specification? = nil
    var _currentBudgetPeriod: GRPCBudget.Period? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _budgetSpecification = source._budgetSpecification
      _currentBudgetPeriod = source._currentBudgetPeriod
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._budgetSpecification)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._currentBudgetPeriod)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._budgetSpecification {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._currentBudgetPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Summary, rhs: GRPCBudget.Summary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._budgetSpecification != rhs_storage._budgetSpecification {return false}
        if _storage._currentBudgetPeriod != rhs_storage._currentBudgetPeriod {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudget.Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCBudget.protoMessageName + ".Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "amount"),
    3: .standard(proto: "dispensable_amount"),
    4: .same(proto: "date"),
    5: .same(proto: "description"),
    6: .standard(proto: "category_code"),
    7: .standard(proto: "account_id"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _dispensableAmount: GRPCCurrencyDenominatedAmount? = nil
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _categoryCode: String = String()
    var _accountID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _amount = source._amount
      _dispensableAmount = source._dispensableAmount
      _date = source._date
      _description_p = source._description_p
      _categoryCode = source._categoryCode
      _accountID = source._accountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._dispensableAmount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeSingularStringField(value: &_storage._categoryCode)
        case 7: try decoder.decodeSingularStringField(value: &_storage._accountID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._dispensableAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._categoryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._categoryCode, fieldNumber: 6)
      }
      if !_storage._accountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountID, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudget.Transaction, rhs: GRPCBudget.Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._dispensableAmount != rhs_storage._dispensableAmount {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._categoryCode != rhs_storage._categoryCode {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCurrency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Currency"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "factor"),
    3: .same(proto: "prefixed"),
    4: .same(proto: "symbol"),
  ]

  fileprivate class _StorageClass {
    var _code: String = String()
    var _factor: GRPCExactNumber? = nil
    var _prefixed: Bool = false
    var _symbol: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _factor = source._factor
      _prefixed = source._prefixed
      _symbol = source._symbol
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._code)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._factor)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._prefixed)
        case 4: try decoder.decodeSingularStringField(value: &_storage._symbol)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._code.isEmpty {
        try visitor.visitSingularStringField(value: _storage._code, fieldNumber: 1)
      }
      if let v = _storage._factor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._prefixed != false {
        try visitor.visitSingularBoolField(value: _storage._prefixed, fieldNumber: 3)
      }
      if !_storage._symbol.isEmpty {
        try visitor.visitSingularStringField(value: _storage._symbol, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCurrency, rhs: GRPCCurrency) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._factor != rhs_storage._factor {return false}
        if _storage._prefixed != rhs_storage._prefixed {return false}
        if _storage._symbol != rhs_storage._symbol {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCLoan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Loan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "interest"),
    3: .standard(proto: "number_of_months_bound"),
    4: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _accountID: String = String()
    var _interest: GRPCExactNumber? = nil
    var _numberOfMonthsBound: Int32 = 0
    var _type: GRPCLoan.TypeEnum = .unknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _interest = source._interest
      _numberOfMonthsBound = source._numberOfMonthsBound
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._accountID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._interest)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._numberOfMonthsBound)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._accountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountID, fieldNumber: 1)
      }
      if let v = _storage._interest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._numberOfMonthsBound != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numberOfMonthsBound, fieldNumber: 3)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCLoan, rhs: GRPCLoan) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._interest != rhs_storage._interest {return false}
        if _storage._numberOfMonthsBound != rhs_storage._numberOfMonthsBound {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCLoan.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_MORTGAGE"),
    2: .same(proto: "TYPE_BLANCO"),
    3: .same(proto: "TYPE_MEMBERSHIP"),
    4: .same(proto: "TYPE_VEHICLE"),
    5: .same(proto: "TYPE_LAND"),
    6: .same(proto: "TYPE_STUDENT"),
    7: .same(proto: "TYPE_OTHER"),
  ]
}

extension GRPCCategoryTree: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CategoryTree"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "expenses"),
    2: .same(proto: "income"),
    3: .same(proto: "transfers"),
  ]

  fileprivate class _StorageClass {
    var _expenses: GRPCCategoryNode? = nil
    var _income: GRPCCategoryNode? = nil
    var _transfers: GRPCCategoryNode? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _expenses = source._expenses
      _income = source._income
      _transfers = source._transfers
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._expenses)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._income)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._transfers)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._expenses {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._income {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._transfers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCategoryTree, rhs: GRPCCategoryTree) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._expenses != rhs_storage._expenses {return false}
        if _storage._income != rhs_storage._income {return false}
        if _storage._transfers != rhs_storage._transfers {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCategoryNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CategoryNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "id"),
    3: .same(proto: "name"),
    4: .same(proto: "children"),
    5: .standard(proto: "sort_order"),
    6: .standard(proto: "default_child"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.children)
      case 5: try decoder.decodeSingularInt32Field(value: &self.sortOrder)
      case 6: try decoder.decodeSingularBoolField(value: &self.defaultChild)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 4)
    }
    if self.sortOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.sortOrder, fieldNumber: 5)
    }
    if self.defaultChild != false {
      try visitor.visitSingularBoolField(value: self.defaultChild, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCategoryNode, rhs: GRPCCategoryNode) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.children != rhs.children {return false}
    if lhs.sortOrder != rhs.sortOrder {return false}
    if lhs.defaultChild != rhs.defaultChild {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "notification_token"),
    3: .standard(proto: "notification_public_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.notificationToken)
      case 3: try decoder.decodeSingularStringField(value: &self.notificationPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.notificationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.notificationToken, fieldNumber: 2)
    }
    if !self.notificationPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.notificationPublicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCDevice, rhs: GRPCDevice) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.notificationToken != rhs.notificationToken {return false}
    if lhs.notificationPublicKey != rhs.notificationPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCDeviceAppsFlyerOrigin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceAppsFlyerOrigin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "extra_param_1"),
    2: .standard(proto: "extra_param_2"),
    3: .standard(proto: "extra_param_3"),
    4: .standard(proto: "extra_param_4"),
    5: .standard(proto: "extra_param_5"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.extraParam1)
      case 2: try decoder.decodeSingularStringField(value: &self.extraParam2)
      case 3: try decoder.decodeSingularStringField(value: &self.extraParam3)
      case 4: try decoder.decodeSingularStringField(value: &self.extraParam4)
      case 5: try decoder.decodeSingularStringField(value: &self.extraParam5)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.extraParam1.isEmpty {
      try visitor.visitSingularStringField(value: self.extraParam1, fieldNumber: 1)
    }
    if !self.extraParam2.isEmpty {
      try visitor.visitSingularStringField(value: self.extraParam2, fieldNumber: 2)
    }
    if !self.extraParam3.isEmpty {
      try visitor.visitSingularStringField(value: self.extraParam3, fieldNumber: 3)
    }
    if !self.extraParam4.isEmpty {
      try visitor.visitSingularStringField(value: self.extraParam4, fieldNumber: 4)
    }
    if !self.extraParam5.isEmpty {
      try visitor.visitSingularStringField(value: self.extraParam5, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCDeviceAppsFlyerOrigin, rhs: GRPCDeviceAppsFlyerOrigin) -> Bool {
    if lhs.extraParam1 != rhs.extraParam1 {return false}
    if lhs.extraParam2 != rhs.extraParam2 {return false}
    if lhs.extraParam3 != rhs.extraParam3 {return false}
    if lhs.extraParam4 != rhs.extraParam4 {return false}
    if lhs.extraParam5 != rhs.extraParam5 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCDeviceFacebookOrigin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceFacebookOrigin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "ad_group_id"),
    3: .standard(proto: "ad_group_name"),
    4: .standard(proto: "ad_set_id"),
    5: .standard(proto: "ad_set_name"),
    6: .standard(proto: "ad_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
      case 2: try decoder.decodeSingularStringField(value: &self.adGroupID)
      case 3: try decoder.decodeSingularStringField(value: &self.adGroupName)
      case 4: try decoder.decodeSingularStringField(value: &self.adSetID)
      case 5: try decoder.decodeSingularStringField(value: &self.adSetName)
      case 6: try decoder.decodeSingularStringField(value: &self.adID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.campaignID.isEmpty {
      try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
    }
    if !self.adGroupID.isEmpty {
      try visitor.visitSingularStringField(value: self.adGroupID, fieldNumber: 2)
    }
    if !self.adGroupName.isEmpty {
      try visitor.visitSingularStringField(value: self.adGroupName, fieldNumber: 3)
    }
    if !self.adSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.adSetID, fieldNumber: 4)
    }
    if !self.adSetName.isEmpty {
      try visitor.visitSingularStringField(value: self.adSetName, fieldNumber: 5)
    }
    if !self.adID.isEmpty {
      try visitor.visitSingularStringField(value: self.adID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCDeviceFacebookOrigin, rhs: GRPCDeviceFacebookOrigin) -> Bool {
    if lhs.campaignID != rhs.campaignID {return false}
    if lhs.adGroupID != rhs.adGroupID {return false}
    if lhs.adGroupName != rhs.adGroupName {return false}
    if lhs.adSetID != rhs.adSetID {return false}
    if lhs.adSetName != rhs.adSetName {return false}
    if lhs.adID != rhs.adID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProviderFieldSpecification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProviderFieldSpecification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "hint"),
    3: .standard(proto: "max_length"),
    4: .standard(proto: "min_length"),
    5: .same(proto: "masked"),
    6: .same(proto: "numeric"),
    7: .same(proto: "immutable"),
    8: .same(proto: "optional"),
    9: .same(proto: "name"),
    10: .same(proto: "value"),
    11: .same(proto: "pattern"),
    12: .standard(proto: "pattern_error"),
    13: .standard(proto: "help_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.description_p)
      case 2: try decoder.decodeSingularStringField(value: &self.hint)
      case 3: try decoder.decodeSingularInt32Field(value: &self.maxLength)
      case 4: try decoder.decodeSingularInt32Field(value: &self.minLength)
      case 5: try decoder.decodeSingularBoolField(value: &self.masked)
      case 6: try decoder.decodeSingularBoolField(value: &self.numeric)
      case 7: try decoder.decodeSingularBoolField(value: &self.immutable)
      case 8: try decoder.decodeSingularBoolField(value: &self.optional)
      case 9: try decoder.decodeSingularStringField(value: &self.name)
      case 10: try decoder.decodeSingularStringField(value: &self.value)
      case 11: try decoder.decodeSingularStringField(value: &self.pattern)
      case 12: try decoder.decodeSingularStringField(value: &self.patternError)
      case 13: try decoder.decodeSingularStringField(value: &self.helpText)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.hint.isEmpty {
      try visitor.visitSingularStringField(value: self.hint, fieldNumber: 2)
    }
    if self.maxLength != 0 {
      try visitor.visitSingularInt32Field(value: self.maxLength, fieldNumber: 3)
    }
    if self.minLength != 0 {
      try visitor.visitSingularInt32Field(value: self.minLength, fieldNumber: 4)
    }
    if self.masked != false {
      try visitor.visitSingularBoolField(value: self.masked, fieldNumber: 5)
    }
    if self.numeric != false {
      try visitor.visitSingularBoolField(value: self.numeric, fieldNumber: 6)
    }
    if self.immutable != false {
      try visitor.visitSingularBoolField(value: self.immutable, fieldNumber: 7)
    }
    if self.optional != false {
      try visitor.visitSingularBoolField(value: self.optional, fieldNumber: 8)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 9)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 10)
    }
    if !self.pattern.isEmpty {
      try visitor.visitSingularStringField(value: self.pattern, fieldNumber: 11)
    }
    if !self.patternError.isEmpty {
      try visitor.visitSingularStringField(value: self.patternError, fieldNumber: 12)
    }
    if !self.helpText.isEmpty {
      try visitor.visitSingularStringField(value: self.helpText, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProviderFieldSpecification, rhs: GRPCProviderFieldSpecification) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.hint != rhs.hint {return false}
    if lhs.maxLength != rhs.maxLength {return false}
    if lhs.minLength != rhs.minLength {return false}
    if lhs.masked != rhs.masked {return false}
    if lhs.numeric != rhs.numeric {return false}
    if lhs.immutable != rhs.immutable {return false}
    if lhs.optional != rhs.optional {return false}
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.patternError != rhs.patternError {return false}
    if lhs.helpText != rhs.helpText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCGiroLookupEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiroLookupEntity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "identifier"),
    3: .same(proto: "images"),
    4: .standard(proto: "display_number"),
  ]

  fileprivate class _StorageClass {
    var _displayName: String = String()
    var _identifier: String = String()
    var _images: GRPCImages? = nil
    var _displayNumber: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _displayName = source._displayName
      _identifier = source._identifier
      _images = source._images
      _displayNumber = source._displayNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 2: try decoder.decodeSingularStringField(value: &_storage._identifier)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 4: try decoder.decodeSingularStringField(value: &_storage._displayNumber)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 1)
      }
      if !_storage._identifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identifier, fieldNumber: 2)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._displayNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayNumber, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCGiroLookupEntity, rhs: GRPCGiroLookupEntity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._displayNumber != rhs_storage._displayNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCImages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Images"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "icon_url"),
    2: .standard(proto: "banner_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.iconURL)
      case 2: try decoder.decodeSingularStringField(value: &self.bannerURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 1)
    }
    if !self.bannerURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCImages, rhs: GRPCImages) -> Bool {
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.bannerURL != rhs.bannerURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCSignableOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SignableOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "created"),
    2: .same(proto: "id"),
    3: .same(proto: "status"),
    4: .standard(proto: "status_message"),
    5: .same(proto: "type"),
    6: .standard(proto: "underlying_id"),
    7: .same(proto: "updated"),
    8: .standard(proto: "credential_id"),
    9: .standard(proto: "third_party_app_authentication"),
  ]

  fileprivate class _StorageClass {
    var _created: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _id: String = String()
    var _status: GRPCSignableOperation.Status = .unknown
    var _statusMessage: String = String()
    var _type: GRPCSignableOperation.TypeEnum = .unknown
    var _underlyingID: String = String()
    var _updated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _credentialID: String = String()
    var _thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _created = source._created
      _id = source._id
      _status = source._status
      _statusMessage = source._statusMessage
      _type = source._type
      _underlyingID = source._underlyingID
      _updated = source._updated
      _credentialID = source._credentialID
      _thirdPartyAppAuthentication = source._thirdPartyAppAuthentication
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._created)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 4: try decoder.decodeSingularStringField(value: &_storage._statusMessage)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 6: try decoder.decodeSingularStringField(value: &_storage._underlyingID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._updated)
        case 8: try decoder.decodeSingularStringField(value: &_storage._credentialID)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._thirdPartyAppAuthentication)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._created {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      if !_storage._statusMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusMessage, fieldNumber: 4)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 5)
      }
      if !_storage._underlyingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._underlyingID, fieldNumber: 6)
      }
      if let v = _storage._updated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._credentialID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._credentialID, fieldNumber: 8)
      }
      if let v = _storage._thirdPartyAppAuthentication {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCSignableOperation, rhs: GRPCSignableOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._created != rhs_storage._created {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._statusMessage != rhs_storage._statusMessage {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._underlyingID != rhs_storage._underlyingID {return false}
        if _storage._updated != rhs_storage._updated {return false}
        if _storage._credentialID != rhs_storage._credentialID {return false}
        if _storage._thirdPartyAppAuthentication != rhs_storage._thirdPartyAppAuthentication {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCSignableOperation.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_CREATED"),
    2: .same(proto: "STATUS_EXECUTING"),
    3: .same(proto: "STATUS_AWAITING_CREDENTIALS"),
    4: .same(proto: "STATUS_CANCELLED"),
    5: .same(proto: "STATUS_FAILED"),
    6: .same(proto: "STATUS_EXECUTED"),
    7: .same(proto: "STATUS_AWAITING_THIRD_PARTY_APP_AUTHENTICATION"),
  ]
}

extension GRPCSignableOperation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_TRANSFER"),
    2: .same(proto: "TYPE_ACCOUNT_CREATE"),
  ]
}

extension GRPCTrackingEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TrackingEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "category"),
    3: .same(proto: "action"),
    4: .same(proto: "label"),
    5: .standard(proto: "default_value"),
  ]

  fileprivate class _StorageClass {
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _category: String = String()
    var _action: String = String()
    var _label: String = String()
    var _defaultValue: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _category = source._category
      _action = source._action
      _label = source._label
      _defaultValue = source._defaultValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 2: try decoder.decodeSingularStringField(value: &_storage._category)
        case 3: try decoder.decodeSingularStringField(value: &_storage._action)
        case 4: try decoder.decodeSingularStringField(value: &_storage._label)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._defaultValue)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._category.isEmpty {
        try visitor.visitSingularStringField(value: _storage._category, fieldNumber: 2)
      }
      if !_storage._action.isEmpty {
        try visitor.visitSingularStringField(value: _storage._action, fieldNumber: 3)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 4)
      }
      if _storage._defaultValue != 0 {
        try visitor.visitSingularInt64Field(value: _storage._defaultValue, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTrackingEvent, rhs: GRPCTrackingEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._date != rhs_storage._date {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._defaultValue != rhs_storage._defaultValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTrackingTiming: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TrackingTiming"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "category"),
    3: .same(proto: "time"),
    4: .same(proto: "label"),
    5: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _category: String = String()
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _label: String = String()
    var _name: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _category = source._category
      _time = source._time
      _label = source._label
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 2: try decoder.decodeSingularStringField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 4: try decoder.decodeSingularStringField(value: &_storage._label)
        case 5: try decoder.decodeSingularStringField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._category.isEmpty {
        try visitor.visitSingularStringField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTrackingTiming, rhs: GRPCTrackingTiming) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._date != rhs_storage._date {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._name != rhs_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTrackingView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TrackingView"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTrackingView, rhs: GRPCTrackingView) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._date != rhs_storage._date {return false}
        if _storage._name != rhs_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransactionCluster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TransactionCluster"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "transactions"),
    3: .same(proto: "score"),
    4: .standard(proto: "categorization_improvement"),
  ]

  fileprivate class _StorageClass {
    var _description_p: String = String()
    var _transactions: [GRPCTransaction] = []
    var _score: GRPCExactNumber? = nil
    var _categorizationImprovement: GRPCExactNumber? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _transactions = source._transactions
      _score = source._score
      _categorizationImprovement = source._categorizationImprovement
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._transactions)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._score)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._categorizationImprovement)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 1)
      }
      if !_storage._transactions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transactions, fieldNumber: 2)
      }
      if let v = _storage._score {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._categorizationImprovement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransactionCluster, rhs: GRPCTransactionCluster) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._transactions != rhs_storage._transactions {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._categorizationImprovement != rhs_storage._categorizationImprovement {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransferDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TransferDestination"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "name"),
    3: .same(proto: "balance"),
    4: .standard(proto: "display_bank_name"),
    5: .same(proto: "type"),
    6: .same(proto: "images"),
    7: .standard(proto: "display_account_number"),
    8: .standard(proto: "matches_multiple"),
  ]

  fileprivate class _StorageClass {
    var _uri: String = String()
    var _name: String = String()
    var _balance: GRPCCurrencyDenominatedAmount? = nil
    var _displayBankName: String = String()
    var _type: GRPCAccount.TypeEnum = .unknown
    var _images: GRPCImages? = nil
    var _displayAccountNumber: String = String()
    var _matchesMultiple: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uri = source._uri
      _name = source._name
      _balance = source._balance
      _displayBankName = source._displayBankName
      _type = source._type
      _images = source._images
      _displayAccountNumber = source._displayAccountNumber
      _matchesMultiple = source._matchesMultiple
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uri)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 4: try decoder.decodeSingularStringField(value: &_storage._displayBankName)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 7: try decoder.decodeSingularStringField(value: &_storage._displayAccountNumber)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._matchesMultiple)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._displayBankName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayBankName, fieldNumber: 4)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 5)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._displayAccountNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayAccountNumber, fieldNumber: 7)
      }
      if _storage._matchesMultiple != false {
        try visitor.visitSingularBoolField(value: _storage._matchesMultiple, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransferDestination, rhs: GRPCTransferDestination) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._displayBankName != rhs_storage._displayBankName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._displayAccountNumber != rhs_storage._displayAccountNumber {return false}
        if _storage._matchesMultiple != rhs_storage._matchesMultiple {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransferDestinationPerAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TransferDestinationPerAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "destinations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.destinations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.destinations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.destinations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransferDestinationPerAccount, rhs: GRPCTransferDestinationPerAccount) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.destinations != rhs.destinations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Transfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "credential_id"),
    3: .standard(proto: "destination_uri"),
    4: .standard(proto: "destination_message"),
    5: .same(proto: "id"),
    6: .standard(proto: "source_uri"),
    7: .standard(proto: "source_message"),
    8: .same(proto: "type"),
    9: .standard(proto: "due_date"),
  ]

  fileprivate class _StorageClass {
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _credentialID: String = String()
    var _destinationUri: String = String()
    var _destinationMessage: String = String()
    var _id: String = String()
    var _sourceUri: String = String()
    var _sourceMessage: String = String()
    var _type: GRPCTransfer.TypeEnum = .unknown
    var _dueDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _amount = source._amount
      _credentialID = source._credentialID
      _destinationUri = source._destinationUri
      _destinationMessage = source._destinationMessage
      _id = source._id
      _sourceUri = source._sourceUri
      _sourceMessage = source._sourceMessage
      _type = source._type
      _dueDate = source._dueDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 2: try decoder.decodeSingularStringField(value: &_storage._credentialID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._destinationUri)
        case 4: try decoder.decodeSingularStringField(value: &_storage._destinationMessage)
        case 5: try decoder.decodeSingularStringField(value: &_storage._id)
        case 6: try decoder.decodeSingularStringField(value: &_storage._sourceUri)
        case 7: try decoder.decodeSingularStringField(value: &_storage._sourceMessage)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._dueDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._credentialID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._credentialID, fieldNumber: 2)
      }
      if !_storage._destinationUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationUri, fieldNumber: 3)
      }
      if !_storage._destinationMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destinationMessage, fieldNumber: 4)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 5)
      }
      if !_storage._sourceUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceUri, fieldNumber: 6)
      }
      if !_storage._sourceMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceMessage, fieldNumber: 7)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 8)
      }
      if let v = _storage._dueDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransfer, rhs: GRPCTransfer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._credentialID != rhs_storage._credentialID {return false}
        if _storage._destinationUri != rhs_storage._destinationUri {return false}
        if _storage._destinationMessage != rhs_storage._destinationMessage {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceUri != rhs_storage._sourceUri {return false}
        if _storage._sourceMessage != rhs_storage._sourceMessage {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._dueDate != rhs_storage._dueDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransfer.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_EINVOICE"),
    2: .same(proto: "TYPE_PAYMENT"),
    3: .same(proto: "TYPE_BANK_TRANSFER"),
  ]
}

extension GRPCUserProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserProfile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "national_id"),
    3: .standard(proto: "authorized_login_methods"),
    4: .standard(proto: "available_login_methods"),
    5: .standard(proto: "created_date"),
  ]

  fileprivate class _StorageClass {
    var _username: String = String()
    var _nationalID: String = String()
    var _authorizedLoginMethods: [GRPCAuthenticationMethod] = []
    var _availableLoginMethods: [GRPCAuthenticationMethod] = []
    var _createdDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _username = source._username
      _nationalID = source._nationalID
      _authorizedLoginMethods = source._authorizedLoginMethods
      _availableLoginMethods = source._availableLoginMethods
      _createdDate = source._createdDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._username)
        case 2: try decoder.decodeSingularStringField(value: &_storage._nationalID)
        case 3: try decoder.decodeRepeatedEnumField(value: &_storage._authorizedLoginMethods)
        case 4: try decoder.decodeRepeatedEnumField(value: &_storage._availableLoginMethods)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 1)
      }
      if !_storage._nationalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nationalID, fieldNumber: 2)
      }
      if !_storage._authorizedLoginMethods.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._authorizedLoginMethods, fieldNumber: 3)
      }
      if !_storage._availableLoginMethods.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._availableLoginMethods, fieldNumber: 4)
      }
      if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserProfile, rhs: GRPCUserProfile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._username != rhs_storage._username {return false}
        if _storage._nationalID != rhs_storage._nationalID {return false}
        if _storage._authorizedLoginMethods != rhs_storage._authorizedLoginMethods {return false}
        if _storage._availableLoginMethods != rhs_storage._availableLoginMethods {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCUserConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "i18n_configuration"),
    3: .standard(proto: "user_id"),
  ]

  fileprivate class _StorageClass {
    var _flags: [String] = []
    var _i18NConfiguration: GRPCUserConfiguration.I18NConfiguration? = nil
    var _userID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _flags = source._flags
      _i18NConfiguration = source._i18NConfiguration
      _userID = source._userID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._flags)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._i18NConfiguration)
        case 3: try decoder.decodeSingularStringField(value: &_storage._userID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._flags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._flags, fieldNumber: 1)
      }
      if let v = _storage._i18NConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserConfiguration, rhs: GRPCUserConfiguration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._i18NConfiguration != rhs_storage._i18NConfiguration {return false}
        if _storage._userID != rhs_storage._userID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCUserConfiguration.I18NConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCUserConfiguration.protoMessageName + ".I18NConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "currency_code"),
    2: .standard(proto: "locale_code"),
    3: .standard(proto: "market_code"),
    4: .standard(proto: "timezone_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.currencyCode)
      case 2: try decoder.decodeSingularStringField(value: &self.localeCode)
      case 3: try decoder.decodeSingularStringField(value: &self.marketCode)
      case 4: try decoder.decodeSingularStringField(value: &self.timezoneCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currencyCode.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyCode, fieldNumber: 1)
    }
    if !self.localeCode.isEmpty {
      try visitor.visitSingularStringField(value: self.localeCode, fieldNumber: 2)
    }
    if !self.marketCode.isEmpty {
      try visitor.visitSingularStringField(value: self.marketCode, fieldNumber: 3)
    }
    if !self.timezoneCode.isEmpty {
      try visitor.visitSingularStringField(value: self.timezoneCode, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserConfiguration.I18NConfiguration, rhs: GRPCUserConfiguration.I18NConfiguration) -> Bool {
    if lhs.currencyCode != rhs.currencyCode {return false}
    if lhs.localeCode != rhs.localeCode {return false}
    if lhs.marketCode != rhs.marketCode {return false}
    if lhs.timezoneCode != rhs.timezoneCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCI18NSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "I18NSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "locale_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.localeCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.localeCode.isEmpty {
      try visitor.visitSingularStringField(value: self.localeCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCI18NSettings, rhs: GRPCI18NSettings) -> Bool {
    if lhs.localeCode != rhs.localeCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPeriodSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PeriodSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "period_date_break_type"),
    2: .standard(proto: "monthly_adjusted_day"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.periodDateBreakType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.monthlyAdjustedDay)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.periodDateBreakType != .unknown {
      try visitor.visitSingularEnumField(value: self.periodDateBreakType, fieldNumber: 1)
    }
    if self.monthlyAdjustedDay != 0 {
      try visitor.visitSingularInt32Field(value: self.monthlyAdjustedDay, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPeriodSettings, rhs: GRPCPeriodSettings) -> Bool {
    if lhs.periodDateBreakType != rhs.periodDateBreakType {return false}
    if lhs.monthlyAdjustedDay != rhs.monthlyAdjustedDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCNotificationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NotificationSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groups"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.groups)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCNotificationSettings, rhs: GRPCNotificationSettings) -> Bool {
    if lhs.groups != rhs.groups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCNotificationGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NotificationGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "notification_types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.notificationTypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.notificationTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.notificationTypes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCNotificationGroup, rhs: GRPCNotificationGroup) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.notificationTypes != rhs.notificationTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCNotificationType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NotificationType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "title"),
    3: .same(proto: "enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularBoolField(value: &self.enabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCNotificationType, rhs: GRPCNotificationType) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCUserOrigin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserOrigin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "serviceName"),
    3: .same(proto: "organic"),
    4: .standard(proto: "external_service_id"),
    5: .standard(proto: "media_source"),
    6: .same(proto: "campaign"),
    7: .same(proto: "agency"),
    8: .standard(proto: "click_time"),
    9: .standard(proto: "install_time"),
    10: .standard(proto: "extra_param1"),
    11: .standard(proto: "extra_param2"),
    12: .standard(proto: "extra_param3"),
    13: .standard(proto: "extra_param4"),
    14: .standard(proto: "extra_param5"),
    15: .standard(proto: "facebook_ad"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _serviceName: String = String()
    var _organic: Bool = false
    var _externalServiceID: String = String()
    var _mediaSource: String = String()
    var _campaign: String = String()
    var _agency: String = String()
    var _clickTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _installTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _extraParam1: String = String()
    var _extraParam2: String = String()
    var _extraParam3: String = String()
    var _extraParam4: String = String()
    var _extraParam5: String = String()
    var _facebookAd: GRPCFacebookAd? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _serviceName = source._serviceName
      _organic = source._organic
      _externalServiceID = source._externalServiceID
      _mediaSource = source._mediaSource
      _campaign = source._campaign
      _agency = source._agency
      _clickTime = source._clickTime
      _installTime = source._installTime
      _extraParam1 = source._extraParam1
      _extraParam2 = source._extraParam2
      _extraParam3 = source._extraParam3
      _extraParam4 = source._extraParam4
      _extraParam5 = source._extraParam5
      _facebookAd = source._facebookAd
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._serviceName)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._organic)
        case 4: try decoder.decodeSingularStringField(value: &_storage._externalServiceID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._mediaSource)
        case 6: try decoder.decodeSingularStringField(value: &_storage._campaign)
        case 7: try decoder.decodeSingularStringField(value: &_storage._agency)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._clickTime)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._installTime)
        case 10: try decoder.decodeSingularStringField(value: &_storage._extraParam1)
        case 11: try decoder.decodeSingularStringField(value: &_storage._extraParam2)
        case 12: try decoder.decodeSingularStringField(value: &_storage._extraParam3)
        case 13: try decoder.decodeSingularStringField(value: &_storage._extraParam4)
        case 14: try decoder.decodeSingularStringField(value: &_storage._extraParam5)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._facebookAd)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._serviceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceName, fieldNumber: 2)
      }
      if _storage._organic != false {
        try visitor.visitSingularBoolField(value: _storage._organic, fieldNumber: 3)
      }
      if !_storage._externalServiceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalServiceID, fieldNumber: 4)
      }
      if !_storage._mediaSource.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaSource, fieldNumber: 5)
      }
      if !_storage._campaign.isEmpty {
        try visitor.visitSingularStringField(value: _storage._campaign, fieldNumber: 6)
      }
      if !_storage._agency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._agency, fieldNumber: 7)
      }
      if let v = _storage._clickTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._installTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._extraParam1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraParam1, fieldNumber: 10)
      }
      if !_storage._extraParam2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraParam2, fieldNumber: 11)
      }
      if !_storage._extraParam3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraParam3, fieldNumber: 12)
      }
      if !_storage._extraParam4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraParam4, fieldNumber: 13)
      }
      if !_storage._extraParam5.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extraParam5, fieldNumber: 14)
      }
      if let v = _storage._facebookAd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserOrigin, rhs: GRPCUserOrigin) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._serviceName != rhs_storage._serviceName {return false}
        if _storage._organic != rhs_storage._organic {return false}
        if _storage._externalServiceID != rhs_storage._externalServiceID {return false}
        if _storage._mediaSource != rhs_storage._mediaSource {return false}
        if _storage._campaign != rhs_storage._campaign {return false}
        if _storage._agency != rhs_storage._agency {return false}
        if _storage._clickTime != rhs_storage._clickTime {return false}
        if _storage._installTime != rhs_storage._installTime {return false}
        if _storage._extraParam1 != rhs_storage._extraParam1 {return false}
        if _storage._extraParam2 != rhs_storage._extraParam2 {return false}
        if _storage._extraParam3 != rhs_storage._extraParam3 {return false}
        if _storage._extraParam4 != rhs_storage._extraParam4 {return false}
        if _storage._extraParam5 != rhs_storage._extraParam5 {return false}
        if _storage._facebookAd != rhs_storage._facebookAd {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFacebookAd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FacebookAd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "campaign_id"),
    4: .standard(proto: "ad_set_id"),
    5: .standard(proto: "ad_set_name"),
    6: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.groupID)
      case 2: try decoder.decodeSingularStringField(value: &self.groupName)
      case 3: try decoder.decodeSingularStringField(value: &self.campaignID)
      case 4: try decoder.decodeSingularStringField(value: &self.adSetID)
      case 5: try decoder.decodeSingularStringField(value: &self.adSetName)
      case 6: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if !self.campaignID.isEmpty {
      try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 3)
    }
    if !self.adSetID.isEmpty {
      try visitor.visitSingularStringField(value: self.adSetID, fieldNumber: 4)
    }
    if !self.adSetName.isEmpty {
      try visitor.visitSingularStringField(value: self.adSetName, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFacebookAd, rhs: GRPCFacebookAd) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.campaignID != rhs.campaignID {return false}
    if lhs.adSetID != rhs.adSetID {return false}
    if lhs.adSetName != rhs.adSetName {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCAuthenticationKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AuthenticationKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_type"),
    2: .same(proto: "id"),
    3: .same(proto: "key"),
    4: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.keyType)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.key)
      case 4: try decoder.decodeSingularEnumField(value: &self.source)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyType != .keyTypeUnknown {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 3)
    }
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCAuthenticationKey, rhs: GRPCAuthenticationKey) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityEventAnswer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityEventAnswer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      case 2: try decoder.decodeSingularEnumField(value: &self.key)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if self.key != .unknown {
      try visitor.visitSingularEnumField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityEventAnswer, rhs: GRPCIdentityEventAnswer) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "date"),
    3: .same(proto: "description"),
    4: .same(proto: "seen"),
    5: .same(proto: "question"),
    6: .standard(proto: "potential_answers"),
    7: .same(proto: "answer"),
    8: .same(proto: "documentation"),
    9: .same(proto: "transactions"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _seen: Bool = false
    var _question: String = String()
    var _potentialAnswers: [GRPCIdentityEventAnswer] = []
    var _answer: GRPCIdentityDocumentedAnswer? = nil
    var _documentation: GRPCIdentityEventDocumentation? = nil
    var _transactions: [GRPCTransaction] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _date = source._date
      _description_p = source._description_p
      _seen = source._seen
      _question = source._question
      _potentialAnswers = source._potentialAnswers
      _answer = source._answer
      _documentation = source._documentation
      _transactions = source._transactions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._seen)
        case 5: try decoder.decodeSingularStringField(value: &_storage._question)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._potentialAnswers)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._answer)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._documentation)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._transactions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._seen != false {
        try visitor.visitSingularBoolField(value: _storage._seen, fieldNumber: 4)
      }
      if !_storage._question.isEmpty {
        try visitor.visitSingularStringField(value: _storage._question, fieldNumber: 5)
      }
      if !_storage._potentialAnswers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._potentialAnswers, fieldNumber: 6)
      }
      if let v = _storage._answer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._documentation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._transactions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transactions, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityEvent, rhs: GRPCIdentityEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._seen != rhs_storage._seen {return false}
        if _storage._question != rhs_storage._question {return false}
        if _storage._potentialAnswers != rhs_storage._potentialAnswers {return false}
        if _storage._answer != rhs_storage._answer {return false}
        if _storage._documentation != rhs_storage._documentation {return false}
        if _storage._transactions != rhs_storage._transactions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityEventSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityEventSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "date"),
    3: .same(proto: "description"),
    4: .same(proto: "seen"),
    5: .same(proto: "answer"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _seen: Bool = false
    var _answer: GRPCIdentityDocumentedAnswer? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _date = source._date
      _description_p = source._description_p
      _seen = source._seen
      _answer = source._answer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._seen)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._answer)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._seen != false {
        try visitor.visitSingularBoolField(value: _storage._seen, fieldNumber: 4)
      }
      if let v = _storage._answer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityEventSummary, rhs: GRPCIdentityEventSummary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._seen != rhs_storage._seen {return false}
        if _storage._answer != rhs_storage._answer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityEventDocumentation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityEventDocumentation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .standard(proto: "info_title"),
    3: .standard(proto: "info_body"),
    4: .standard(proto: "help_title"),
    5: .standard(proto: "help_body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.source)
      case 2: try decoder.decodeSingularStringField(value: &self.infoTitle)
      case 3: try decoder.decodeSingularStringField(value: &self.infoBody)
      case 4: try decoder.decodeSingularStringField(value: &self.helpTitle)
      case 5: try decoder.decodeSingularStringField(value: &self.helpBody)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.infoTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.infoTitle, fieldNumber: 2)
    }
    if !self.infoBody.isEmpty {
      try visitor.visitSingularStringField(value: self.infoBody, fieldNumber: 3)
    }
    if !self.helpTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.helpTitle, fieldNumber: 4)
    }
    if !self.helpBody.isEmpty {
      try visitor.visitSingularStringField(value: self.helpBody, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityEventDocumentation, rhs: GRPCIdentityEventDocumentation) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.infoTitle != rhs.infoTitle {return false}
    if lhs.infoBody != rhs.infoBody {return false}
    if lhs.helpTitle != rhs.helpTitle {return false}
    if lhs.helpBody != rhs.helpBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "postal_code"),
    3: .same(proto: "city"),
    4: .same(proto: "community"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.postalCode)
      case 3: try decoder.decodeSingularStringField(value: &self.city)
      case 4: try decoder.decodeSingularStringField(value: &self.community)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.postalCode.isEmpty {
      try visitor.visitSingularStringField(value: self.postalCode, fieldNumber: 2)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 3)
    }
    if !self.community.isEmpty {
      try visitor.visitSingularStringField(value: self.community, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateAddress, rhs: GRPCIdentityStateAddress) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.postalCode != rhs.postalCode {return false}
    if lhs.city != rhs.city {return false}
    if lhs.community != rhs.community {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateProperty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateProperty"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "municipality"),
    3: .same(proto: "number"),
    4: .standard(proto: "acquisition_date"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _municipality: String = String()
    var _number: String = String()
    var _acquisitionDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _municipality = source._municipality
      _number = source._number
      _acquisitionDate = source._acquisitionDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._municipality)
        case 3: try decoder.decodeSingularStringField(value: &_storage._number)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._acquisitionDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._municipality.isEmpty {
        try visitor.visitSingularStringField(value: _storage._municipality, fieldNumber: 2)
      }
      if !_storage._number.isEmpty {
        try visitor.visitSingularStringField(value: _storage._number, fieldNumber: 3)
      }
      if let v = _storage._acquisitionDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateProperty, rhs: GRPCIdentityStateProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._municipality != rhs_storage._municipality {return false}
        if _storage._number != rhs_storage._number {return false}
        if _storage._acquisitionDate != rhs_storage._acquisitionDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateCompany: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateCompany"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.number)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateCompany, rhs: GRPCIdentityStateCompany) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.number != rhs.number {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateRole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateRole, rhs: GRPCIdentityStateRole) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateCompanyEngagement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateCompanyEngagement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "company"),
    2: .same(proto: "roles"),
    4: .standard(proto: "date_in"),
  ]

  fileprivate class _StorageClass {
    var _company: GRPCIdentityStateCompany? = nil
    var _roles: [GRPCIdentityStateRole] = []
    var _dateIn: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _company = source._company
      _roles = source._roles
      _dateIn = source._dateIn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._roles)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._dateIn)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._roles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._roles, fieldNumber: 2)
      }
      if let v = _storage._dateIn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateCompanyEngagement, rhs: GRPCIdentityStateCompanyEngagement) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._company != rhs_storage._company {return false}
        if _storage._roles != rhs_storage._roles {return false}
        if _storage._dateIn != rhs_storage._dateIn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateCreditScore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateCreditScore"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "score"),
    3: .standard(proto: "max_score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      case 2: try decoder.decodeSingularInt32Field(value: &self.score)
      case 3: try decoder.decodeSingularInt32Field(value: &self.maxScore)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 2)
    }
    if self.maxScore != 0 {
      try visitor.visitSingularInt32Field(value: self.maxScore, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateCreditScore, rhs: GRPCIdentityStateCreditScore) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.score != rhs.score {return false}
    if lhs.maxScore != rhs.maxScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateTaxDeclaration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateTaxDeclaration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "final_tax"),
    2: .standard(proto: "total_income"),
    3: .standard(proto: "income_by_service"),
    4: .standard(proto: "income_by_capital"),
    5: .same(proto: "year"),
    6: .standard(proto: "registered_date"),
  ]

  fileprivate class _StorageClass {
    var _finalTax: GRPCCurrencyDenominatedAmount? = nil
    var _totalIncome: GRPCCurrencyDenominatedAmount? = nil
    var _incomeByService: GRPCCurrencyDenominatedAmount? = nil
    var _incomeByCapital: GRPCCurrencyDenominatedAmount? = nil
    var _year: Int32 = 0
    var _registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _finalTax = source._finalTax
      _totalIncome = source._totalIncome
      _incomeByService = source._incomeByService
      _incomeByCapital = source._incomeByCapital
      _year = source._year
      _registeredDate = source._registeredDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._finalTax)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._totalIncome)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._incomeByService)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._incomeByCapital)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._year)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._registeredDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._finalTax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._totalIncome {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._incomeByService {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._incomeByCapital {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._year != 0 {
        try visitor.visitSingularInt32Field(value: _storage._year, fieldNumber: 5)
      }
      if let v = _storage._registeredDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateTaxDeclaration, rhs: GRPCIdentityStateTaxDeclaration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._finalTax != rhs_storage._finalTax {return false}
        if _storage._totalIncome != rhs_storage._totalIncome {return false}
        if _storage._incomeByService != rhs_storage._incomeByService {return false}
        if _storage._incomeByCapital != rhs_storage._incomeByCapital {return false}
        if _storage._year != rhs_storage._year {return false}
        if _storage._registeredDate != rhs_storage._registeredDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateRecordOfNonPayment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateRecordOfNonPayment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "amount"),
    3: .standard(proto: "registered_date"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _amount = source._amount
      _registeredDate = source._registeredDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._registeredDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._registeredDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateRecordOfNonPayment, rhs: GRPCIdentityStateRecordOfNonPayment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._registeredDate != rhs_storage._registeredDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityStateOutstandingDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityStateOutstandingDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "number"),
    3: .standard(proto: "registered_date"),
  ]

  fileprivate class _StorageClass {
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _number: Int32 = 0
    var _registeredDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _amount = source._amount
      _number = source._number
      _registeredDate = source._registeredDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._number)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._registeredDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._number != 0 {
        try visitor.visitSingularInt32Field(value: _storage._number, fieldNumber: 2)
      }
      if let v = _storage._registeredDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityStateOutstandingDebt, rhs: GRPCIdentityStateOutstandingDebt) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._number != rhs_storage._number {return false}
        if _storage._registeredDate != rhs_storage._registeredDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_name"),
    2: .standard(proto: "last_name"),
    3: .standard(proto: "national_id"),
    4: .same(proto: "address"),
    5: .same(proto: "properties"),
    6: .standard(proto: "company_engagements"),
    7: .standard(proto: "credit_score"),
    8: .standard(proto: "most_recent_tax_declaration"),
    9: .standard(proto: "records_of_non_payment"),
    10: .standard(proto: "outstanding_debt"),
  ]

  fileprivate class _StorageClass {
    var _firstName: String = String()
    var _lastName: String = String()
    var _nationalID: String = String()
    var _address: GRPCIdentityStateAddress? = nil
    var _properties: [GRPCIdentityStateProperty] = []
    var _companyEngagements: [GRPCIdentityStateCompanyEngagement] = []
    var _creditScore: GRPCIdentityStateCreditScore? = nil
    var _mostRecentTaxDeclaration: GRPCIdentityStateTaxDeclaration? = nil
    var _recordsOfNonPayment: [GRPCIdentityStateRecordOfNonPayment] = []
    var _outstandingDebt: GRPCIdentityStateOutstandingDebt? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _firstName = source._firstName
      _lastName = source._lastName
      _nationalID = source._nationalID
      _address = source._address
      _properties = source._properties
      _companyEngagements = source._companyEngagements
      _creditScore = source._creditScore
      _mostRecentTaxDeclaration = source._mostRecentTaxDeclaration
      _recordsOfNonPayment = source._recordsOfNonPayment
      _outstandingDebt = source._outstandingDebt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 2: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._nationalID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._address)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._properties)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._companyEngagements)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._creditScore)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._mostRecentTaxDeclaration)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._recordsOfNonPayment)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._outstandingDebt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 1)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 2)
      }
      if !_storage._nationalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nationalID, fieldNumber: 3)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._properties, fieldNumber: 5)
      }
      if !_storage._companyEngagements.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._companyEngagements, fieldNumber: 6)
      }
      if let v = _storage._creditScore {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._mostRecentTaxDeclaration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._recordsOfNonPayment.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._recordsOfNonPayment, fieldNumber: 9)
      }
      if let v = _storage._outstandingDebt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityState, rhs: GRPCIdentityState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._firstName != rhs_storage._firstName {return false}
        if _storage._lastName != rhs_storage._lastName {return false}
        if _storage._nationalID != rhs_storage._nationalID {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._properties != rhs_storage._properties {return false}
        if _storage._companyEngagements != rhs_storage._companyEngagements {return false}
        if _storage._creditScore != rhs_storage._creditScore {return false}
        if _storage._mostRecentTaxDeclaration != rhs_storage._mostRecentTaxDeclaration {return false}
        if _storage._recordsOfNonPayment != rhs_storage._recordsOfNonPayment {return false}
        if _storage._outstandingDebt != rhs_storage._outstandingDebt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCIdentityDocumentedAnswer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IdentityDocumentedAnswer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "answer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.answer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.answer != .unknown {
      try visitor.visitSingularEnumField(value: self.answer, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCIdentityDocumentedAnswer, rhs: GRPCIdentityDocumentedAnswer) -> Bool {
    if lhs.answer != rhs.answer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCConsent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Consent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "version"),
    3: .same(proto: "title"),
    4: .same(proto: "body"),
    5: .same(proto: "checksum"),
    6: .same(proto: "messages"),
    7: .same(proto: "attachments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.body)
      case 5: try decoder.decodeSingularStringField(value: &self.checksum)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.messages)
      case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.attachments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 4)
    }
    if !self.checksum.isEmpty {
      try visitor.visitSingularStringField(value: self.checksum, fieldNumber: 5)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 6)
    }
    if !self.attachments.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.attachments, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCConsent, rhs: GRPCConsent) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.version != rhs.version {return false}
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.checksum != rhs.checksum {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCUserConsent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserConsent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "version"),
    4: .same(proto: "action"),
    5: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _key: String = String()
    var _version: String = String()
    var _action: GRPCConsentAction = .unknown
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _key = source._key
      _version = source._version
      _action = source._action
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._key)
        case 3: try decoder.decodeSingularStringField(value: &_storage._version)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._action)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 2)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 3)
      }
      if _storage._action != .unknown {
        try visitor.visitSingularEnumField(value: _storage._action, fieldNumber: 4)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserConsent, rhs: GRPCUserConsent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCConsentMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ConsentMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "links"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.links)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCConsentMessage, rhs: GRPCConsentMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.links != rhs.links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCConsentMessageLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ConsentMessageLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "start"),
    3: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.to)
      case 2: try decoder.decodeSingularInt32Field(value: &self.start)
      case 3: try decoder.decodeSingularInt32Field(value: &self.end)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if self.start != 0 {
      try visitor.visitSingularInt32Field(value: self.start, fieldNumber: 2)
    }
    if self.end != 0 {
      try visitor.visitSingularInt32Field(value: self.end, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCConsentMessageLink, rhs: GRPCConsentMessageLink) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyAppAuthentication"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "download_title"),
    2: .standard(proto: "download_message"),
    3: .standard(proto: "upgrade_title"),
    4: .standard(proto: "upgrade_message"),
    5: .same(proto: "ios"),
    6: .same(proto: "android"),
    7: .same(proto: "web"),
  ]

  fileprivate class _StorageClass {
    var _downloadTitle: String = String()
    var _downloadMessage: String = String()
    var _upgradeTitle: String = String()
    var _upgradeMessage: String = String()
    var _ios: GRPCThirdPartyAppAuthentication.Ios? = nil
    var _android: GRPCThirdPartyAppAuthentication.Android? = nil
    var _web: GRPCThirdPartyAppAuthentication.Web? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _downloadTitle = source._downloadTitle
      _downloadMessage = source._downloadMessage
      _upgradeTitle = source._upgradeTitle
      _upgradeMessage = source._upgradeMessage
      _ios = source._ios
      _android = source._android
      _web = source._web
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._downloadTitle)
        case 2: try decoder.decodeSingularStringField(value: &_storage._downloadMessage)
        case 3: try decoder.decodeSingularStringField(value: &_storage._upgradeTitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._upgradeMessage)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._ios)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._android)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._web)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._downloadTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._downloadTitle, fieldNumber: 1)
      }
      if !_storage._downloadMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._downloadMessage, fieldNumber: 2)
      }
      if !_storage._upgradeTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upgradeTitle, fieldNumber: 3)
      }
      if !_storage._upgradeMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upgradeMessage, fieldNumber: 4)
      }
      if let v = _storage._ios {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._android {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._web {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication, rhs: GRPCThirdPartyAppAuthentication) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._downloadTitle != rhs_storage._downloadTitle {return false}
        if _storage._downloadMessage != rhs_storage._downloadMessage {return false}
        if _storage._upgradeTitle != rhs_storage._upgradeTitle {return false}
        if _storage._upgradeMessage != rhs_storage._upgradeMessage {return false}
        if _storage._ios != rhs_storage._ios {return false}
        if _storage._android != rhs_storage._android {return false}
        if _storage._web != rhs_storage._web {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Ios: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Ios"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_store_url"),
    2: .same(proto: "scheme"),
    3: .standard(proto: "deep_link_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appStoreURL)
      case 2: try decoder.decodeSingularStringField(value: &self.scheme)
      case 3: try decoder.decodeSingularStringField(value: &self.deepLinkURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appStoreURL.isEmpty {
      try visitor.visitSingularStringField(value: self.appStoreURL, fieldNumber: 1)
    }
    if !self.scheme.isEmpty {
      try visitor.visitSingularStringField(value: self.scheme, fieldNumber: 2)
    }
    if !self.deepLinkURL.isEmpty {
      try visitor.visitSingularStringField(value: self.deepLinkURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Ios, rhs: GRPCThirdPartyAppAuthentication.Ios) -> Bool {
    if lhs.appStoreURL != rhs.appStoreURL {return false}
    if lhs.scheme != rhs.scheme {return false}
    if lhs.deepLinkURL != rhs.deepLinkURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Android: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Android"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "package_name"),
    2: .standard(proto: "required_minimum_version"),
    3: .same(proto: "intent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.packageName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.requiredMinimumVersion)
      case 3: try decoder.decodeSingularStringField(value: &self.intent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 1)
    }
    if self.requiredMinimumVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.requiredMinimumVersion, fieldNumber: 2)
    }
    if !self.intent.isEmpty {
      try visitor.visitSingularStringField(value: self.intent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Android, rhs: GRPCThirdPartyAppAuthentication.Android) -> Bool {
    if lhs.packageName != rhs.packageName {return false}
    if lhs.requiredMinimumVersion != rhs.requiredMinimumVersion {return false}
    if lhs.intent != rhs.intent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Web: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Web"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Web, rhs: GRPCThirdPartyAppAuthentication.Web) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCredentials: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Credentials"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credential"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.credential)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.credential.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.credential, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCredentials, rhs: GRPCCredentials) -> Bool {
    if lhs.credential != rhs.credential {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCAccounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Accounts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.account)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.account.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.account, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCAccounts, rhs: GRPCAccounts) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTransactions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Transactions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.transaction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transaction.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transaction, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTransactions, rhs: GRPCTransactions) -> Bool {
    if lhs.transaction != rhs.transaction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProviders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Providers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.provider)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.provider.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.provider, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProviders, rhs: GRPCProviders) -> Bool {
    if lhs.provider != rhs.provider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPeriods: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Periods"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCPeriod>.self, value: &self.period)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.period.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GRPCPeriod>.self, value: self.period, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPeriods, rhs: GRPCPeriods) -> Bool {
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFollowItems: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FollowItems"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "follow_item"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.followItem)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.followItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.followItem, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFollowItems, rhs: GRPCFollowItems) -> Bool {
    if lhs.followItem != rhs.followItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCSignableOperations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SignableOperations"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signable_operation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.signableOperation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signableOperation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signableOperation, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCSignableOperations, rhs: GRPCSignableOperations) -> Bool {
    if lhs.signableOperation != rhs.signableOperation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBudgetSummaries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BudgetSummaries"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "budget_summaries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.budgetSummaries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.budgetSummaries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.budgetSummaries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBudgetSummaries, rhs: GRPCBudgetSummaries) -> Bool {
    if lhs.budgetSummaries != rhs.budgetSummaries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Insights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "insights"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.insights)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.insights.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.insights, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsights, rhs: GRPCInsights) -> Bool {
    if lhs.insights != rhs.insights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsCategories: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightsCategories"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .standard(proto: "amount_by_category_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.amountByCategoryCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.amountByCategoryCode.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amountByCategoryCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsCategories, rhs: GRPCInsightsCategories) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.amountByCategoryCode != rhs.amountByCategoryCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsCategories.AmountByCategoryCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightsCategories.protoMessageName + ".AmountByCategoryCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "category_code"),
    2: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _categoryCode: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _categoryCode = source._categoryCode
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._categoryCode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._categoryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._categoryCode, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsCategories.AmountByCategoryCode, rhs: GRPCInsightsCategories.AmountByCategoryCode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._categoryCode != rhs_storage._categoryCode {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsMortgage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightsMortgage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .same(proto: "distribution"),
    4: .standard(proto: "interest_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.distribution)
      case 4: try decoder.decodeSingularDoubleField(value: &self.interestRate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.distribution.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.distribution, fieldNumber: 3)
    }
    if self.interestRate != 0 {
      try visitor.visitSingularDoubleField(value: self.interestRate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsMortgage, rhs: GRPCInsightsMortgage) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.distribution != rhs.distribution {return false}
    if lhs.interestRate != rhs.interestRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsMortgage.HistogramBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightsMortgage.protoMessageName + ".HistogramBucket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lower_endpoint"),
    2: .standard(proto: "upper_endpoint"),
    3: .same(proto: "frequency"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.lowerEndpoint)
      case 2: try decoder.decodeSingularDoubleField(value: &self.upperEndpoint)
      case 3: try decoder.decodeSingularDoubleField(value: &self.frequency)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lowerEndpoint != 0 {
      try visitor.visitSingularDoubleField(value: self.lowerEndpoint, fieldNumber: 1)
    }
    if self.upperEndpoint != 0 {
      try visitor.visitSingularDoubleField(value: self.upperEndpoint, fieldNumber: 2)
    }
    if self.frequency != 0 {
      try visitor.visitSingularDoubleField(value: self.frequency, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsMortgage.HistogramBucket, rhs: GRPCInsightsMortgage.HistogramBucket) -> Bool {
    if lhs.lowerEndpoint != rhs.lowerEndpoint {return false}
    if lhs.upperEndpoint != rhs.upperEndpoint {return false}
    if lhs.frequency != rhs.frequency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsSavings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightsSavings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _body: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _body = source._body
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
        case 2: try decoder.decodeSingularStringField(value: &_storage._body)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._body.isEmpty {
        try visitor.visitSingularStringField(value: _storage._body, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsSavings, rhs: GRPCInsightsSavings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsDailySpend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightsDailySpend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .standard(proto: "amount_by_weekday"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.amountByWeekday)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.amountByWeekday.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amountByWeekday, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsDailySpend, rhs: GRPCInsightsDailySpend) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.amountByWeekday != rhs.amountByWeekday {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsDailySpend.AmountByWeekday: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightsDailySpend.protoMessageName + ".AmountByWeekday"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weekday"),
    2: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _weekday: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _weekday = source._weekday
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._weekday)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._weekday.isEmpty {
        try visitor.visitSingularStringField(value: _storage._weekday, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsDailySpend.AmountByWeekday, rhs: GRPCInsightsDailySpend.AmountByWeekday) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._weekday != rhs_storage._weekday {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsLeftToSpend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightsLeftToSpend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "body"),
    3: .standard(proto: "left_to_spend_by_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leftToSpendByPeriod)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.leftToSpendByPeriod.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leftToSpendByPeriod, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsLeftToSpend, rhs: GRPCInsightsLeftToSpend) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.body != rhs.body {return false}
    if lhs.leftToSpendByPeriod != rhs.leftToSpendByPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightsLeftToSpend.LeftToSpendByPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightsLeftToSpend.protoMessageName + ".LeftToSpendByPeriod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "period"),
    2: .same(proto: "percentage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.period)
      case 2: try decoder.decodeSingularDoubleField(value: &self.percentage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.period.isEmpty {
      try visitor.visitSingularStringField(value: self.period, fieldNumber: 1)
    }
    if self.percentage != 0 {
      try visitor.visitSingularDoubleField(value: self.percentage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightsLeftToSpend.LeftToSpendByPeriod, rhs: GRPCInsightsLeftToSpend.LeftToSpendByPeriod) -> Bool {
    if lhs.period != rhs.period {return false}
    if lhs.percentage != rhs.percentage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBusinessDays: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BusinessDays"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "days"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.year)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.month)
      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.days)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if !self.days.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.days, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBusinessDays, rhs: GRPCBusinessDays) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.days != rhs.days {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCErrorCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ErrorCode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCErrorCode, rhs: GRPCErrorCode) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProperty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Property"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "property_id"),
    2: .same(proto: "address"),
    3: .standard(proto: "postal_code"),
    4: .same(proto: "city"),
    5: .same(proto: "community"),
    6: .same(proto: "latitude"),
    7: .same(proto: "longitude"),
    8: .same(proto: "type"),
    9: .standard(proto: "number_of_rooms"),
    10: .standard(proto: "number_of_square_meters"),
    11: .same(proto: "valuation"),
    12: .standard(proto: "loan_account_ids"),
    13: .standard(proto: "registered_address"),
    14: .standard(proto: "user_modified_loan_account_ids"),
    15: .standard(proto: "valuation_amount"),
    16: .standard(proto: "total_loan_amount"),
    17: .standard(proto: "average_interest_rate"),
  ]

  fileprivate class _StorageClass {
    var _propertyID: String = String()
    var _address: String = String()
    var _postalCode: String = String()
    var _city: String = String()
    var _community: String = String()
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _type: GRPCProperty.TypeEnum = .propertyTypeUnknown
    var _numberOfRooms: Int32 = 0
    var _numberOfSquareMeters: Int32 = 0
    var _valuation: Int32 = 0
    var _loanAccountIds: [String] = []
    var _registeredAddress: Bool = false
    var _userModifiedLoanAccountIds: Bool = false
    var _valuationAmount: GRPCCurrencyDenominatedAmount? = nil
    var _totalLoanAmount: GRPCCurrencyDenominatedAmount? = nil
    var _averageInterestRate: GRPCExactNumber? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _propertyID = source._propertyID
      _address = source._address
      _postalCode = source._postalCode
      _city = source._city
      _community = source._community
      _latitude = source._latitude
      _longitude = source._longitude
      _type = source._type
      _numberOfRooms = source._numberOfRooms
      _numberOfSquareMeters = source._numberOfSquareMeters
      _valuation = source._valuation
      _loanAccountIds = source._loanAccountIds
      _registeredAddress = source._registeredAddress
      _userModifiedLoanAccountIds = source._userModifiedLoanAccountIds
      _valuationAmount = source._valuationAmount
      _totalLoanAmount = source._totalLoanAmount
      _averageInterestRate = source._averageInterestRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._propertyID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._address)
        case 3: try decoder.decodeSingularStringField(value: &_storage._postalCode)
        case 4: try decoder.decodeSingularStringField(value: &_storage._city)
        case 5: try decoder.decodeSingularStringField(value: &_storage._community)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._latitude)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._longitude)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._numberOfRooms)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._numberOfSquareMeters)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._valuation)
        case 12: try decoder.decodeRepeatedStringField(value: &_storage._loanAccountIds)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._registeredAddress)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._userModifiedLoanAccountIds)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._valuationAmount)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._totalLoanAmount)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._averageInterestRate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._propertyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._propertyID, fieldNumber: 1)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 2)
      }
      if !_storage._postalCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._postalCode, fieldNumber: 3)
      }
      if !_storage._city.isEmpty {
        try visitor.visitSingularStringField(value: _storage._city, fieldNumber: 4)
      }
      if !_storage._community.isEmpty {
        try visitor.visitSingularStringField(value: _storage._community, fieldNumber: 5)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 6)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 7)
      }
      if _storage._type != .propertyTypeUnknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 8)
      }
      if _storage._numberOfRooms != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numberOfRooms, fieldNumber: 9)
      }
      if _storage._numberOfSquareMeters != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numberOfSquareMeters, fieldNumber: 10)
      }
      if _storage._valuation != 0 {
        try visitor.visitSingularInt32Field(value: _storage._valuation, fieldNumber: 11)
      }
      if !_storage._loanAccountIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._loanAccountIds, fieldNumber: 12)
      }
      if _storage._registeredAddress != false {
        try visitor.visitSingularBoolField(value: _storage._registeredAddress, fieldNumber: 13)
      }
      if _storage._userModifiedLoanAccountIds != false {
        try visitor.visitSingularBoolField(value: _storage._userModifiedLoanAccountIds, fieldNumber: 14)
      }
      if let v = _storage._valuationAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._totalLoanAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._averageInterestRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProperty, rhs: GRPCProperty) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._propertyID != rhs_storage._propertyID {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._postalCode != rhs_storage._postalCode {return false}
        if _storage._city != rhs_storage._city {return false}
        if _storage._community != rhs_storage._community {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._numberOfRooms != rhs_storage._numberOfRooms {return false}
        if _storage._numberOfSquareMeters != rhs_storage._numberOfSquareMeters {return false}
        if _storage._valuation != rhs_storage._valuation {return false}
        if _storage._loanAccountIds != rhs_storage._loanAccountIds {return false}
        if _storage._registeredAddress != rhs_storage._registeredAddress {return false}
        if _storage._userModifiedLoanAccountIds != rhs_storage._userModifiedLoanAccountIds {return false}
        if _storage._valuationAmount != rhs_storage._valuationAmount {return false}
        if _storage._totalLoanAmount != rhs_storage._totalLoanAmount {return false}
        if _storage._averageInterestRate != rhs_storage._averageInterestRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProperty.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPERTY_TYPE_UNKNOWN"),
    1: .same(proto: "PROPERTY_TYPE_HOUSE"),
    2: .same(proto: "PROPERTY_TYPE_APARTMENT"),
    3: .same(proto: "PROPERTY_TYPE_VACATION_HOUSE"),
  ]
}

extension GRPCMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Market"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "label"),
    3: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.label)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCMarket, rhs: GRPCMarket) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.label != rhs.label {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProviderMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProviderMarket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProviderMarket, rhs: GRPCProviderMarket) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPropertyValuationEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyValuationEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "property_id"),
    2: .same(proto: "date"),
    3: .standard(proto: "valuation_amount"),
  ]

  fileprivate class _StorageClass {
    var _propertyID: String = String()
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _valuationAmount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _propertyID = source._propertyID
      _date = source._date
      _valuationAmount = source._valuationAmount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._propertyID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._valuationAmount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._propertyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._propertyID, fieldNumber: 1)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._valuationAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPropertyValuationEvent, rhs: GRPCPropertyValuationEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._propertyID != rhs_storage._propertyID {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._valuationAmount != rhs_storage._valuationAmount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPropertyValuationSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PropertyValuationSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "property_id"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .standard(proto: "from_valuation_amount"),
    5: .standard(proto: "to_valuation_amount"),
  ]

  fileprivate class _StorageClass {
    var _propertyID: String = String()
    var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _fromValuationAmount: GRPCCurrencyDenominatedAmount? = nil
    var _toValuationAmount: GRPCCurrencyDenominatedAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _propertyID = source._propertyID
      _from = source._from
      _to = source._to
      _fromValuationAmount = source._fromValuationAmount
      _toValuationAmount = source._toValuationAmount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._propertyID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._from)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._to)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._fromValuationAmount)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._toValuationAmount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._propertyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._propertyID, fieldNumber: 1)
      }
      if let v = _storage._from {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._to {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._fromValuationAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._toValuationAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPropertyValuationSummary, rhs: GRPCPropertyValuationSummary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._propertyID != rhs_storage._propertyID {return false}
        if _storage._from != rhs_storage._from {return false}
        if _storage._to != rhs_storage._to {return false}
        if _storage._fromValuationAmount != rhs_storage._fromValuationAmount {return false}
        if _storage._toValuationAmount != rhs_storage._toValuationAmount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Insight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "score"),
    4: .same(proto: "title"),
    5: .same(proto: "description"),
    6: .standard(proto: "created_time"),
    7: .standard(proto: "expiration_time"),
    8: .standard(proto: "data_sets"),
    9: .same(proto: "actions"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _type: String = String()
    var _score: GRPCExactNumber? = nil
    var _title: String = String()
    var _description_p: String = String()
    var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dataSets: [GRPCInsightDataSet] = []
    var _actions: [GRPCInsightAction] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _score = source._score
      _title = source._title
      _description_p = source._description_p
      _createdTime = source._createdTime
      _expirationTime = source._expirationTime
      _dataSets = source._dataSets
      _actions = source._actions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._score)
        case 4: try decoder.decodeSingularStringField(value: &_storage._title)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._createdTime)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._expirationTime)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._dataSets)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._actions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if let v = _storage._score {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if let v = _storage._createdTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._dataSets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dataSets, fieldNumber: 8)
      }
      if !_storage._actions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._actions, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsight, rhs: GRPCInsight) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._createdTime != rhs_storage._createdTime {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._dataSets != rhs_storage._dataSets {return false}
        if _storage._actions != rhs_storage._actions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCArchivedInsight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ArchivedInsight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "score"),
    4: .same(proto: "title"),
    5: .same(proto: "description"),
    6: .standard(proto: "created_time"),
    7: .standard(proto: "archived_time"),
    8: .standard(proto: "data_sets"),
    9: .same(proto: "action"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _type: String = String()
    var _score: GRPCExactNumber? = nil
    var _title: String = String()
    var _description_p: String = String()
    var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _archivedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dataSets: [GRPCInsightDataSet] = []
    var _action: GRPCInsightAction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _score = source._score
      _title = source._title
      _description_p = source._description_p
      _createdTime = source._createdTime
      _archivedTime = source._archivedTime
      _dataSets = source._dataSets
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._score)
        case 4: try decoder.decodeSingularStringField(value: &_storage._title)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._createdTime)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._archivedTime)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._dataSets)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._action)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      if let v = _storage._score {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if let v = _storage._createdTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._archivedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._dataSets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dataSets, fieldNumber: 8)
      }
      if let v = _storage._action {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCArchivedInsight, rhs: GRPCArchivedInsight) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._createdTime != rhs_storage._createdTime {return false}
        if _storage._archivedTime != rhs_storage._archivedTime {return false}
        if _storage._dataSets != rhs_storage._dataSets {return false}
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightDataSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightDataSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "data_series"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.dataSeries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.dataSeries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataSeries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightDataSet, rhs: GRPCInsightDataSet) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.dataSeries != rhs.dataSeries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightDataSet.DataSeries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightDataSet.protoMessageName + ".DataSeries"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "data_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dataPoints)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.dataPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataPoints, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightDataSet.DataSeries, rhs: GRPCInsightDataSet.DataSeries) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.dataPoints != rhs.dataPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightDataSet.DataSeries.DataPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCInsightDataSet.DataSeries.protoMessageName + ".DataPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightDataSet.DataSeries.DataPoint, rhs: GRPCInsightDataSet.DataSeries.DataPoint) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InsightAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "target"),
    3: .same(proto: "type"),
    4: .same(proto: "method"),
    5: .same(proto: "group"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      case 2: try decoder.decodeSingularStringField(value: &self.target)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularEnumField(value: &self.method)
      case 5: try decoder.decodeSingularEnumField(value: &self.group)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 2)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.method != .unknown {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 4)
    }
    if self.group != .unknown {
      try visitor.visitSingularEnumField(value: self.group, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCInsightAction, rhs: GRPCInsightAction) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.target != rhs.target {return false}
    if lhs.type != rhs.type {return false}
    if lhs.method != rhs.method {return false}
    if lhs.group != rhs.group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCInsightAction.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_PRIMARY"),
    2: .same(proto: "TYPE_SECONDARY"),
  ]
}

extension GRPCInsightAction.Method: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METHOD_UNKNOWN"),
    1: .same(proto: "METHOD_ACKNOWLEDGE"),
    2: .same(proto: "METHOD_CREATE"),
    3: .same(proto: "METHOD_ADD"),
    4: .same(proto: "METHOD_GO_TO"),
    5: .same(proto: "METHOD_EDIT"),
    6: .same(proto: "METHOD_NOT_NOW"),
    7: .same(proto: "METHOD_DISMISS"),
  ]
}

extension GRPCInsightAction.Group: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GROUP_UNKNOWN"),
    1: .same(proto: "GROUP_EDUCATING"),
    2: .same(proto: "GROUP_ENCOURAGING"),
    3: .same(proto: "GROUP_FUN_FACT"),
    4: .same(proto: "GROUP_PRODUCT_SUGGEST"),
    5: .same(proto: "GROUP_PROMOTION"),
    6: .same(proto: "GROUP_REMINDER"),
    7: .same(proto: "GROUP_SOURCE_DATA"),
    8: .same(proto: "GROUP_SUGGESTION"),
    9: .same(proto: "GROUP_SUMMARY"),
    10: .same(proto: "GROUP_WARNING"),
    11: .same(proto: "GROUP_BUDGET"),
    12: .same(proto: "GROUP_ACCOUNT"),
    13: .same(proto: "GROUP_CATEGORIZATION"),
    14: .same(proto: "GROUP_CREDENTIALS"),
    15: .same(proto: "GROUP_INVOICE"),
    16: .same(proto: "GROUP_FRAUD"),
    17: .same(proto: "GROUP_LEFT_TO_SPEND"),
    18: .same(proto: "GROUP_TRANSFER"),
  ]
}

extension GRPCRecurringTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RecurringTransaction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCRecurringTransaction, rhs: GRPCRecurringTransaction) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCRecurringTransaction.Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCRecurringTransaction.protoMessageName + ".Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transaction_id"),
    2: .same(proto: "type"),
    3: .same(proto: "date"),
    4: .same(proto: "description"),
    5: .same(proto: "amount"),
    6: .same(proto: "category"),
    7: .standard(proto: "group_id"),
    8: .same(proto: "source"),
  ]

  fileprivate class _StorageClass {
    var _transactionID: String = String()
    var _type: GRPCRecurringTransaction.Transaction.TypeEnum = .unknown
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _amount: GRPCCurrencyDenominatedAmount? = nil
    var _category: GRPCRecurringTransaction.Category? = nil
    var _groupID: String = String()
    var _source: GRPCRecurringTransaction.Transaction.Source = .unknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transactionID = source._transactionID
      _type = source._type
      _date = source._date
      _description_p = source._description_p
      _amount = source._amount
      _category = source._category
      _groupID = source._groupID
      _source = source._source
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transactionID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._category)
        case 7: try decoder.decodeSingularStringField(value: &_storage._groupID)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._source)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionID, fieldNumber: 1)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._groupID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupID, fieldNumber: 7)
      }
      if _storage._source != .unknown {
        try visitor.visitSingularEnumField(value: _storage._source, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCRecurringTransaction.Transaction, rhs: GRPCRecurringTransaction.Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transactionID != rhs_storage._transactionID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._source != rhs_storage._source {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCRecurringTransaction.Transaction.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_PREDICTED"),
    2: .same(proto: "TYPE_EXISTING"),
  ]
}

extension GRPCRecurringTransaction.Transaction.Source: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_UNKNOWN"),
    1: .same(proto: "SOURCE_USER_ADDED"),
    2: .same(proto: "SOURCE_GENERATED"),
  ]
}

extension GRPCRecurringTransaction.Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCRecurringTransaction.protoMessageName + ".Category"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "code"),
    3: .standard(proto: "primary_name"),
    4: .standard(proto: "secondary_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.primaryName)
      case 4: try decoder.decodeSingularStringField(value: &self.secondaryName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 2)
    }
    if !self.primaryName.isEmpty {
      try visitor.visitSingularStringField(value: self.primaryName, fieldNumber: 3)
    }
    if !self.secondaryName.isEmpty {
      try visitor.visitSingularStringField(value: self.secondaryName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCRecurringTransaction.Category, rhs: GRPCRecurringTransaction.Category) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.code != rhs.code {return false}
    if lhs.primaryName != rhs.primaryName {return false}
    if lhs.secondaryName != rhs.secondaryName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCRecurringTransaction.Category.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_INCOME"),
    2: .same(proto: "TYPE_EXPENSE"),
    3: .same(proto: "TYPE_TRANSFER"),
  ]
}

extension GRPCRecurringTransaction.Group: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCRecurringTransaction.protoMessageName + ".Group"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "qualifier"),
    4: .same(proto: "periodicity"),
    5: .standard(proto: "category_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.qualifier)
      case 4: try decoder.decodeSingularEnumField(value: &self.periodicity)
      case 5: try decoder.decodeSingularEnumField(value: &self.categoryType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.qualifier.isEmpty {
      try visitor.visitSingularStringField(value: self.qualifier, fieldNumber: 3)
    }
    if self.periodicity != .unknown {
      try visitor.visitSingularEnumField(value: self.periodicity, fieldNumber: 4)
    }
    if self.categoryType != .unknown {
      try visitor.visitSingularEnumField(value: self.categoryType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCRecurringTransaction.Group, rhs: GRPCRecurringTransaction.Group) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.qualifier != rhs.qualifier {return false}
    if lhs.periodicity != rhs.periodicity {return false}
    if lhs.categoryType != rhs.categoryType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCRecurringTransaction.Group.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNKNOWN"),
    1: .same(proto: "STATE_DISABLED"),
    2: .same(proto: "STATE_ACTIVE"),
  ]
}

extension GRPCRecurringTransaction.Group.RecurringPeriodicity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RECURRING_PERIODICITY_UNKNOWN"),
    1: .same(proto: "RECURRING_PERIODICITY_MONTHLY"),
    2: .same(proto: "RECURRING_PERIODICITY_QUARTERLY"),
    3: .same(proto: "RECURRING_PERIODICITY_YEARLY"),
  ]
}

extension GRPCRecurringTransaction.PeriodSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCRecurringTransaction.protoMessageName + ".PeriodSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_amount"),
    2: .same(proto: "start"),
    3: .same(proto: "end"),
  ]

  fileprivate class _StorageClass {
    var _totalAmount: GRPCCurrencyDenominatedAmount? = nil
    var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _totalAmount = source._totalAmount
      _start = source._start
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._totalAmount)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._end)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._totalAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCRecurringTransaction.PeriodSummary, rhs: GRPCRecurringTransaction.PeriodSummary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._totalAmount != rhs_storage._totalAmount {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCKycQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "KycQuestion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reference"),
    2: .same(proto: "answer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.reference)
      case 2: try decoder.decodeSingularStringField(value: &self.answer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reference.isEmpty {
      try visitor.visitSingularStringField(value: self.reference, fieldNumber: 1)
    }
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCKycQuestion, rhs: GRPCKycQuestion) -> Bool {
    if lhs.reference != rhs.reference {return false}
    if lhs.answer != rhs.answer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCOAuth2ScopeDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OAuth2ScopeDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCOAuth2ScopeDescription, rhs: GRPCOAuth2ScopeDescription) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
